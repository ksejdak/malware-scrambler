#include "CoreSystem.h"
#include "MutationEngine\MutationPipelineFactory.h"
#include "Utils\Debug\Debug.h"

#include <sstream>

CoreSystem::CoreSystem(const MainOptions& mainOptions)
    : m_inputPath(mainOptions.inputPath)
    , m_outputPath(mainOptions.outputPath)
    , m_configPath(mainOptions.configPath)
    , m_multipleFileProcessing(boost::filesystem::is_directory(m_inputPath))
{
    m_mutationPipeline = MutationPipelineFactory::getInstance().createPipeline(m_configPath);
}

void CoreSystem::run()
{
    LOG_INFO("Starting code-scrambler");

    if(m_multipleFileProcessing)
    {
        boost::filesystem::directory_iterator dirItEnd;
        for(boost::filesystem::directory_iterator dirIt(m_inputPath); dirIt != dirItEnd; ++dirIt)
        {
            if(!boost::filesystem::is_regular_file(dirIt->status()))
                continue;

            processOneFile(dirIt->path());
        }
    }
    else
        processOneFile(m_inputPath);
}

void CoreSystem::processOneFile(const boost::filesystem::path& filePath)
{
    LOG_INFO("=========================================================================");
    LOG_INFO("Processing [file: " + filePath.string() + "]");

    boost::filesystem::path outputPath = m_outputPath;
    outputPath /= "scrambled_" + filePath.filename().string();

    try
    {
        std::shared_ptr<PEFile> PEFile(new PEFile(filePath));
        m_mutationPipeline->process(PEFile);
        PEFile->save(outputPath);
    }
    catch(std::exception& exc)
    {
        if(!m_multipleFileProcessing)
        {
            std::exception_ptr excPtr = std::current_exception();
            std::rethrow_exception(excPtr);
        }

        std::stringstream ss;
        ss << "exception occured: [what: " << exc.what() << "], but multiple file processing, skipping";
        LOG_ERROR(ss.str());
    }
}