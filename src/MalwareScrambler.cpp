#include "MalwareScrambler.h"
#include "PortableExecutable\PortableExecutableCommon\PEFile.h"
#include "MutationEngine\MutationPipeline.h"
#include "MutationEngine\MutationPipelineFactory.h"
#include "Utils\Debug\Debug.h"
#include "Utils\Toolbox\Version.h"

#include <sstream>
#include <boost\filesystem.hpp>

MalwareScrambler::MalwareScrambler(const std::string& inputPath, const std::string& outputPath, const std::string& configPath)
    : m_inputPath(inputPath.c_str())
    , m_outputPath(outputPath.c_str())
    , m_configPath(configPath.c_str())
    , m_multipleFileProcessing(boost::filesystem::is_directory(m_inputPath))
    , m_mutatedFiles(0)
    , m_failedFiles(0)
{
}

void MalwareScrambler::run()
{
    LOG_INFO("Starting code-scrambler");

    std::shared_ptr<MutationPipeline> mutationPipeline = MutationPipelineFactory::getInstance().createPipeline(m_configPath);
    if(m_multipleFileProcessing)
    {
        boost::filesystem::directory_iterator dirItEnd;
        for(boost::filesystem::directory_iterator dirIt(m_inputPath); dirIt != dirItEnd; ++dirIt)
        {
            if(!boost::filesystem::is_regular_file(dirIt->status()))
                continue;

            processOneFile(mutationPipeline, dirIt->path().string());
        }
    }
    else
        processOneFile(mutationPipeline, m_inputPath);

    printSummary();
}

std::string MalwareScrambler::getVersion()
{
    return PROGRAM_VERSION;
}

std::string MalwareScrambler::getAuthor()
{
    return PROGRAM_AUTHOR;
}

std::string MalwareScrambler::getBuildDate()
{
    return BUILD_TIME + " " + BUILD_DATE;
}

unsigned int MalwareScrambler::getMutatedFilesCount()
{
    return m_mutatedFiles;
}

unsigned int MalwareScrambler::getFailedFilesCount()
{
    return m_failedFiles;
}

void MalwareScrambler::processOneFile(std::shared_ptr<MutationPipeline> mutationPipeline, const std::string& filePath)
{
    LOG_EMPTY();
    LOG_INFO("=========================================================================");
    LOG_INFO("Processing [file: " + filePath + "]");

    boost::filesystem::path currentPath = filePath;
    boost::filesystem::path outputPath = m_outputPath;
    outputPath /= "scrambled_" + currentPath.filename().string();

    try
    {
        std::shared_ptr<PEFile> PEFile(new PEFile(currentPath));
        mutationPipeline->process(PEFile);
        PEFile->save(outputPath);
        ++m_mutatedFiles;
    }
    catch(std::exception& exc)
    {
        ++m_failedFiles;
        if(!m_multipleFileProcessing)
        {
            printSummary();
            std::exception_ptr excPtr = std::current_exception();
            std::rethrow_exception(excPtr);
        }

        std::stringstream ss;
        ss << "exception occured: [what: " << exc.what() << "], but multiple file processing, skipping";
        LOG_ERROR(ss.str());
    }
}

void MalwareScrambler::printSummary()
{
    LOG_EMPTY();
    LOG_INFO("=========================================================================");
    LOG_INFO("                                  SUMMARY                                ");
    LOG_INFO("=========================================================================");
    LOG_INFO("Total files   : " + std::to_string(m_mutatedFiles + m_failedFiles)        );
    LOG_INFO("Mutated files : " + std::to_string(m_mutatedFiles)                        );
    LOG_INFO("Failed files  : " + std::to_string(m_failedFiles)                         );
    LOG_INFO("=========================================================================");
}