#ifndef ENCRYPTIONENGINE_H
#define ENCRYPTIONENGINE_H

#include "IMutationEngine.h"
#include "Utils\XMLParser\IXMLParser.h"
#include "Utils\CodeProvider\ICodeProvider.h"

#include <vector>
#include <string>
#include <memory>
#include <boost\property_tree\ptree.hpp>

class EncryptionEngine : public IMutationEngine, public IXMLParser
{
public:
    /// @brief Constructor
    /// @param [in] engineTree      property tree describing engine
    EncryptionEngine(const boost::property_tree::ptree& engineTree);

    /// @brief Virtual destructor
    virtual ~EncryptionEngine() {}

    /// @see IMutationEngine::mutate
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context);

private:
    /// @see IXMLParser::initRequiredSubnodes
    virtual std::vector<std::string>& getRequiredSubnodes();

    /// @brief Reads XML configuration subtree
    /// @param [in] configurationTree   XML configuration subtree
    void readConfiguration(const boost::property_tree::ptree& configurationTree);

    /// @brief Reads XML code provider subtree
    /// @param [in] codeProviderTree    XML code provider subtree
    void readCodeProvider(const boost::property_tree::ptree& codeProviderTree);

    /// @brief Adds wildcards in code provider
    /// @param [in] codeSize        size of code that will be decoded
    void registerWildcards(size_t codeSize);

private:
    bool m_isMultiple;
    std::string m_prevDecoderSize;
    std::string m_encryptionKey;
    std::shared_ptr<ICodeProvider> m_codeProvider;
};

#endif