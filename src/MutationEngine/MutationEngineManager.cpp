#include "MutationEngineManager.h"
#include "Utils\Debug\Debug.h"
#include "EncryptionEngine.h"
#include "ResourceInjector.h"
#include "SectionResizer.h"
#include "ResourceExtractor.h"

#include <stdexcept>
#include <sstream>
#include <boost\assign.hpp>

enum EngineType
{
    UNKNOWN_ENGINE,
    ENCRYPTION_ENGINE,
    RESOURCE_INJECTOR,
    SECTION_RESIZER,
    RESOURCE_EXTRACTOR
};

static EngineType engineNameToType(std::string engineName)
{
    std::map<std::string, EngineType> engineTypes = boost::assign::map_list_of("EncryptionEngine", ENCRYPTION_ENGINE)
                                                                              ("ResourceInjector", RESOURCE_INJECTOR)
                                                                              ("SectionResizer",   SECTION_RESIZER)
                                                                              ("ResourceExtractor", RESOURCE_EXTRACTOR)
                                                                              ;

    if(engineTypes.find(engineName) == engineTypes.end())
        return UNKNOWN_ENGINE;

    return engineTypes[engineName];
}

std::shared_ptr<IMutationEngine> MutationEngineManager::createMutationEngine(std::string name, const boost::property_tree::ptree& engineTree)
{
    std::shared_ptr<IMutationEngine> engine;
    EngineType engineType = engineNameToType(name);

    switch(engineType)
    {
    case ENCRYPTION_ENGINE:
        engine.reset(new EncryptionEngine(engineTree));
        break;
    case RESOURCE_INJECTOR:
        engine.reset(new ResourceInjector(engineTree));
        break;
    case SECTION_RESIZER:
        engine.reset(new SectionResizer(engineTree));
        break;
    case RESOURCE_EXTRACTOR:
        engine.reset(new ResourceExtractor(engineTree));
        break;
    case UNKNOWN_ENGINE:
        // pass through
    default:
        std::stringstream errMsg;
        errMsg << MODULE_NAME + " engine \"" << name << "\" does not exist";
        throw std::runtime_error(errMsg.str());
    }

    return engine;
}