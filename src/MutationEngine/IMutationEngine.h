#ifndef IMUTATIONENGINE_H
#define IMUTATIONENGINE_H

#include "PortableExecutable\PortableExecutableCommon\PEFile.h"

#include <string>
#include <memory>
#include <map>

class IMutationEngine
{
public:
    /// @brief Constructor
    /// @param [in] name        engine name
    IMutationEngine(std::string name) : m_name(name) {}

    /// @brief Virtual destructor
    virtual ~IMutationEngine() {}

    /// @brief Gets engine name
    /// @return engine name
    virtual std::string getName()
    {
        return m_name;
    }

    /// @brief Mutates provieded PEFile
    /// @param [in] PE              PEFile to be mutated
    /// @param [in/out] context     input/output context
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context) = 0;

private:
    std::string m_name;
};

#endif