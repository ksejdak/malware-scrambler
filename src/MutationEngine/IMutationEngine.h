#ifndef IMUTATIONENGINE_H
#define IMUTATIONENGINE_H

#include "PortableExecutable\PortableExecutableCommon\PEFile.h"

#include <string>
#include <memory>
#include <map>
#include <vector>
#include <boost\property_tree\ptree.hpp>

class IMutationEngine
{
public:
    /// @brief Constructor
    /// @param [in] name        engine name
    IMutationEngine(std::string name) : m_name(name) {}

    /// @brief Virtual destructor
    virtual ~IMutationEngine() {}

    /// @brief Gets engine name
    /// @return engine name
    virtual std::string getName()
    {
        return m_name;
    }

    /// @brief Checks if given node name is required by this engine
    /// @return true if found, false otherwise
    bool findInRequiredSubnodes(const std::string& nodeName);

    /// @brief Gets required subnodes' names
    /// @return required subnodes' names
    virtual std::vector<std::string>& getRequiredSubnodes() = 0;

    /// @brief Checks if XML engine tree is valid according to its required subnodes
    /// @note  This method throws exception if tree is not valid
    /// @param [in] engineTree      property tree describing engine
    void validateSubtree(const boost::property_tree::ptree& engineTree);

    /// @brief Mutates provieded PEFile
    /// @param [in] PE              PEFile to be mutated
    /// @param [in/out] context     input/output context
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context) = 0;

private:
    std::string m_name;
};

#endif