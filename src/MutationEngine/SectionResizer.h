#ifndef SECTIONRESIZER_H
#define SECTIONRESIZER_H

#include "IMutationEngine.h"

#include <utility>
#include <boost\property_tree\ptree.hpp>

class SectionResizer : public IMutationEngine
{
public:
    /// @brief Constructor
    /// @param [in] engineTree      property tree describing engine
    SectionResizer(const boost::property_tree::ptree& engineTree);

    /// @brief Virtual destructor
    virtual ~SectionResizer() {}

    /// @see IMutationEngine::mutate
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context);

private:
    /// @brief Finds data directories that lies within any secion, that may be relocated
    /// @param [in] PE              PEFile to be mutated
    void identifyDataDirectoriesToUpdate(std::shared_ptr<PEFile> PE);

    /// @brief Updates some PE header fileds containing conrete section addresses
    /// @param [in] PE                      PEFile to be mutated
    /// @param [in] resizedSection          PESection that was resized
    void updatePEStructures(std::shared_ptr<PEFile> PE, std::shared_ptr<PESection> resizedSection);

    /// @brief Updates RVA of all identified data directories that lies within section that was resized
    /// @param [in] PE                      PEFile to be mutated
    /// @param [in] resizedSection          PESection that was resized
    void updateDataDirectoryEntries(std::shared_ptr<PEFile> PE, std::shared_ptr<PESection> resizedSection);

    std::map<int, std::pair<std::string, unsigned long>> m_dataDirectoriesToUpdated;
};

#endif