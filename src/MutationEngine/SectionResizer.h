#ifndef SECTIONRESIZER_H
#define SECTIONRESIZER_H

#include "IMutationEngine.h"

#include <utility>
#include <boost\property_tree\ptree.hpp>

class SectionResizer : public IMutationEngine
{
public:
    /// @brief Constructor
    /// @param [in] engineTree      property tree describing engine
    SectionResizer(const boost::property_tree::ptree& engineTree);

    /// @brief Virtual destructor
    virtual ~SectionResizer() {}

    /// @see IMutationEngine::mutate
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context);

private:
    /// @brief Method groups all other functions that has to be called before process of resizing sections
    /// @param [in] PE              PEFile to be mutated
    void identifyFieldsToUpdate(std::shared_ptr<PEFile> PE);

    /// @brief Finds what was first section RVA and file offset
    /// @param [in] PE              PEFile to be mutated
    void identifyFirstSectionPosition(std::shared_ptr<PEFile> PE);

    /// @brief Finds what sections were associated with baseOfCode and baseOfData in PE header stucture
    /// @param [in] PE              PEFile to be mutated
    void identifyPEHeaderFieldsToUpdate(std::shared_ptr<PEFile> PE);

    /// @brief Finds data directories that lies within any secion, that may be relocated
    /// @param [in] PE              PEFile to be mutated
    void identifyDataDirectoriesToUpdate(std::shared_ptr<PEFile> PE);

    /// @brief Method groups all other functions that has to be called after process of resizing sections
    /// @param [in] PE              PEFile to be mutated
    /// @param [in] resizedSection          PESection that was resized
    void updateFields(std::shared_ptr<PEFile> PE, std::shared_ptr<PESection> resizedSection);

    /// @brief Updates some PE header fileds containing conrete section addresses
    /// @param [in] PE                      PEFile to be mutated
    /// @param [in] resizedSection          PESection that was resized
    void updatePEStructures(std::shared_ptr<PEFile> PE, std::shared_ptr<PESection> resizedSection);

    /// @brief Updates RVA of all identified data directories that lies within section that was resized
    /// @param [in] PE                      PEFile to be mutated
    /// @param [in] resizedSection          PESection that was resized
    void updateDataDirectoryUpdates(std::shared_ptr<PEFile> PE, std::shared_ptr<PESection> resizedSection);

    ///@brief Updates RVAs of data directory and within them
    /// @param [in] PE                      PEFile to be mutated
    void updateDataDirectory(std::shared_ptr<PEFile> PE);
    
    /// @brief Updates size of image
    /// @param [in] PE                      PEFile to be mutated
    void updateSizeOfImage(std::shared_ptr<PEFile> PE);

private:
    struct DataDirectoryUpdate
    {
        std::string holdingSectionName;
        unsigned long oldSectionRVA;
        unsigned long newSectionRVA;
    };

    std::string m_baseOfCodeSectionName;
    std::string m_baseOfDataSectionName;
    unsigned long m_firstSectionRVA;
    unsigned long m_firstSectionOffset;
    unsigned long m_firstFileSectionOffset;
    std::map<DataDirectoryType, DataDirectoryUpdate> m_dataDirectoriesToUpdate;
};

#endif