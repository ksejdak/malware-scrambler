#include "MutationPipelineFactory.h"
#include "MutationEngineManager.h"
#include "Utils\Debug\Debug.h"

#include <boost\property_tree\xml_parser.hpp>
#include <string>
#include <stdexcept>

std::shared_ptr<MutationPipeline> MutationPipelineFactory::createPipeline(const boost::filesystem::path& configPath)
{
    std::shared_ptr<MutationPipeline> mutationPipeline(new MutationPipeline());
	MutationEngineManager enginesManager = MutationEngineManager::getInstance();
	
    boost::property_tree::ptree configTree = parseConfigXML(configPath);

    for(const boost::property_tree::ptree::value_type& node : configTree.get_child("MutationPipeline"))
    {
        if(std::string(node.first.data()) == "<xmlcomment>")
            continue;

        if(std::string(node.first.data()) != "Engine")
            throw std::runtime_error(MODULE_NAME + " invalid node in MutationPipeline node");

        std::string engineName = node.second.get<std::string>("<xmlattr>.name", "");
        if(engineName == "")
            throw std::runtime_error(MODULE_NAME + " engine name not specified");

        mutationPipeline->insert(enginesManager.createMutationEngine(engineName, node.second));
    }

	return mutationPipeline;
}

boost::property_tree::ptree MutationPipelineFactory::parseConfigXML(const boost::filesystem::path& configPath)
{
    boost::property_tree::ptree configTree;
    boost::property_tree::xml_parser::read_xml(configPath.string(), configTree);

    return configTree;
}