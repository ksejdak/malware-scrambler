#include "ResourceExtractor.h"
#include "PortableExecutable\ResourcesSection.h"
#include "PortableExecutable\ResourceEntry.h"
#include "Utils\Debug\Debug.h"

#include <stdexcept>
#include <fstream>
#include <boost\range\adaptors.hpp>

ResourceExtractor::ResourceExtractor(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("ResourceExtractor")
{
    bool resourcesFound = false;
    for(const boost::property_tree::ptree::value_type& node : engineTree)
    {
        if(std::string(node.first.data()) != "Resource")
            continue;

        std::string outputPath = node.second.get<std::string>("<xmlattr>.path", "");
        std::string resourceType = node.second.get<std::string>("<xmlattr>.type", "");

        if(outputPath == "" || resourceType == "")
            throw std::runtime_error(MODULE_NAME + " one or more attributes is empty in Resource node");

		unsigned long extractedType = 0;
        std::stringstream ss;
        ss << resourceType;
        ss >> extractedType;

        m_extractedResources[extractedType] = outputPath;
        resourcesFound = true;
    }

    if(!resourcesFound)
        throw std::runtime_error(MODULE_NAME + " no Resource node found in Engine node");
}

void ResourceExtractor::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    unsigned long resourceDirectoryRVA = PE->getNTHeaders()->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE].VirtualAddress;

    std::shared_ptr<PESection> section = PE->RVAToSection(resourceDirectoryRVA);
    std::shared_ptr<ResourcesSection> resourceSection = std::static_pointer_cast<ResourcesSection>(section);

    size_t removedSize = 0;
    for(unsigned int removeId : m_extractedResources | boost::adaptors::map_keys)
    {
        ResourceIterator it(resourceSection->getRoot());
        std::shared_ptr<ResourceEntry> resource;
        while(resource = it.getNext())
        {
            unsigned long resourceId = resource->getId();
            if(resourceId != removeId)
                continue;

            boost::filesystem::ofstream file;
            file.open(m_extractedResources[resourceId], std::ios::out | std::ios::binary);
            std::shared_ptr<std::vector<uint8_t>> resourceData = resource->getResource();
            for(unsigned int i = 0; i < resourceData->size(); ++i)
                file.write(reinterpret_cast<char*>(&resourceData->at(i)), 1);

            file.close();
            it.remove();

            removedSize += resourceData->size();
            break;
        }
    }

    long shrinkSize = -(static_cast<long>(removedSize));
    context["resize"] = std::to_string(shrinkSize);
    context["resizeFrom"] = section->getName();
}