#include "SectionResizer.h"
#include "Utils\Debug\Debug.h"

#include <stdexcept>
#include <algorithm>

SectionResizer::SectionResizer(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("SectionResizer")
{
}

void SectionResizer::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    if(context.find("resize") == context.end() || context.find("resizeFrom") == context.end())
        throw std::runtime_error(MODULE_NAME + " no 'resize' or 'resizeFrom' key in engine context");

    std::stringstream ss;
    ss << context["resize"];
    long sizeDelta;
    ss >> sizeDelta;

    long fileAlignment = (long) PE->getNTHeaders()->OptionalHeader.FileAlignment;
    long sectionAlignment = (long)PE->getNTHeaders()->OptionalHeader.SectionAlignment;

    std::string resizeFrom = context["resizeFrom"];
    std::vector<std::string> sectionsOrder = PE->getSectionsOrder();
    std::vector<std::string>::iterator sectionIt = std::find(sectionsOrder.begin(), sectionsOrder.end(), resizeFrom);
    if(sectionIt == sectionsOrder.end())
        return;

    for(sectionIt; sectionIt != sectionsOrder.end(); ++sectionIt)
    {
        std::shared_ptr<PESection> section = PE->getSections()[*sectionIt];

        unsigned long& sectionStart = section->getSectionHeader()->PointerToRawData;
        unsigned long& sectionRVAStart = section->getSectionHeader()->VirtualAddress;
        unsigned long oldSectionSize = section->getSectionHeader()->SizeOfRawData;
        unsigned long& sectionSize = section->getSectionHeader()->SizeOfRawData;

        long alignStep = (sizeDelta >= 0) ? 1 : -1;

        // align start of all sections apart from first one
        if(section->getName() != resizeFrom)
        {
            resizeDWORD(sectionStart, sizeDelta);
            while(sectionStart % fileAlignment)
                resizeDWORD(sectionStart, alignStep);

            sectionRVAStart = PE->offsetToRVA(sectionStart);
            while(sectionRVAStart % sectionAlignment)
                resizeDWORD(sectionRVAStart, alignStep);
        }

        // resize first section and align it
        if(section->getName() == resizeFrom)
        {
            resizeDWORD(sectionSize, sizeDelta);
            while((sectionStart + sectionSize) % fileAlignment)
                resizeDWORD(sectionSize, alignStep);

            long PEResize = (sectionSize >= oldSectionSize) ? (sectionSize - oldSectionSize) : -(oldSectionSize - sectionSize);
            PE->addSize(PEResize);
        }
    }
}

void SectionResizer::resizeDWORD(unsigned long& size, long sizeDelta)
{
    long long newValue = (long long) size + sizeDelta;
    size = (unsigned long) newValue;
}