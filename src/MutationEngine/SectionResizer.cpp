#include "SectionResizer.h"
#include "Utils\Debug\Debug.h"

#include <stdexcept>
#include <algorithm>

const static unsigned long FIRST_SECTION_VIRTUAL_START  = 0x1000;
const static unsigned long FIRST_SECTION_RAW_START      = 0x400;

SectionResizer::SectionResizer(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("SectionResizer")
{
}

void SectionResizer::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    unsigned long sectionAlignment = PE->getNTHeaders()->OptionalHeader.SectionAlignment;
    unsigned long fileAlignment = PE->getNTHeaders()->OptionalHeader.FileAlignment;

    unsigned long previousSectionVirtualEnd = 0;
    unsigned long previousSectionRawEnd = 0;

    size_t sectionsOverallRawSize = 0;

    for(std::string sectionName : PE->getSectionsOrder())
    {
        std::shared_ptr<PESection> section = PE->getSections()[sectionName];

        // align data size
        size_t dataSize = section->getDataSize();

        size_t virtualPaddingSize = 0;
        if(sectionName == ".data")
            virtualPaddingSize = (section->getVirtualSize() % sectionAlignment) ? sectionAlignment - (section->getVirtualSize() % sectionAlignment) : 0;
        else
            virtualPaddingSize = (dataSize % sectionAlignment) ? sectionAlignment - (dataSize % sectionAlignment) : 0;
        size_t filePaddingSize = (dataSize % fileAlignment) ? fileAlignment - (dataSize % fileAlignment) : 0;

        section->getSectionHeader()->Misc.VirtualSize = (section->getName() == ".data") ? section->getVirtualSize() : dataSize;
        section->getSectionHeader()->SizeOfRawData = dataSize + filePaddingSize;

        // align section RVA and file offset
        bool isFirst = (PE->getSectionsOrder().front() == sectionName);
        if(isFirst)
        {
            // first section will always start at default file offset and default RVA
            section->getSectionHeader()->VirtualAddress = FIRST_SECTION_VIRTUAL_START;
            section->getSectionHeader()->PointerToRawData = FIRST_SECTION_RAW_START;
        }
        else
        {
            // other sections will always start at the end of previous section's end
            section->getSectionHeader()->VirtualAddress = previousSectionVirtualEnd;
            section->getSectionHeader()->PointerToRawData = previousSectionRawEnd;
        }

        previousSectionVirtualEnd = section->getSectionHeader()->VirtualAddress + section->getVirtualSize() + virtualPaddingSize;
        previousSectionRawEnd = section->getSectionHeader()->PointerToRawData + section->getRawSize();

        sectionsOverallRawSize += section->getRawSize();

        // update some PE header fields
        if(sectionName == ".text")
            PE->getNTHeaders()->OptionalHeader.BaseOfCode = section->getSectionHeader()->VirtualAddress;
        else if(sectionName == ".rdata")
            PE->getNTHeaders()->OptionalHeader.BaseOfData = section->getSectionHeader()->VirtualAddress;
    }

    // last section's raw end indicates size of whole PE file
    PE->setFileSize(previousSectionRawEnd);
}