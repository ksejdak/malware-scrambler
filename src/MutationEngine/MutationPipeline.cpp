#include "MutationPipeline.h"

void MutationPipeline::insert(std::shared_ptr<IMutationEngine> engine)
{
    m_mutationEngines.push_back(engine);
}

void MutationPipeline::clear()
{
    m_mutationEngines.clear();
}

unsigned int MutationPipeline::count()
{
    return m_mutationEngines.size();
}

void MutationPipeline::process(std::shared_ptr<PEFile> PE)
{
    std::map<std::string, std::string> context;
    for(std::shared_ptr<IMutationEngine> engine : m_mutationEngines)
        engine->mutate(PE, context);
}