#include "IATDeleterEngine.h"
#include "PortableExecutable\PortableExecutableCommon\CodeSectionLayoutAnalyzer.h"
#include "Utils\Debug\Debug.h"

#include <sstream>
#include <boost\assign\list_of.hpp>

static const std::string IS_LAST_WILDCARD = "<IS_LAST>";

IATDeleterEngine::IATDeleterEngine(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("IATDeleterEngine")
    , IXMLParser("IATDeleterEngine")
{
    validateSubtree(engineTree);

    for(const boost::property_tree::ptree::value_type& node : engineTree)
    {
        std::string nodeName = node.first.data();
        if(!findInRequiredSubnodes(nodeName))
            continue;

        if(nodeName == "Configuration")
            readConfiguration(node.second);
        else if(nodeName == "CodeProvider")
            readCodeProvider(node.second);
    }
}

void IATDeleterEngine::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    LOG_EMPTY();
    LOG_INFO("Starting mutation...");

    LOG_INFO("Mutation success!");
}

std::vector<std::string>& IATDeleterEngine::getRequiredSubnodes()
{
    static std::vector<std::string> requiredSubnodes = boost::assign::list_of("Configuration")
                                                                             ("CodeProvider")
                                                                             ;
    return requiredSubnodes;
}

void IATDeleterEngine::readConfiguration(const boost::property_tree::ptree& configurationTree)
{
    m_encryptionKey = configurationTree.get<std::string>("<xmlattr>.encryptionKey", "");
}

void IATDeleterEngine::readCodeProvider(const boost::property_tree::ptree& codeProviderTree)
{
    std::shared_ptr<ICodeProvider> codeProvider = ICodeProvider::create(codeProviderTree);
    std::string providerId = codeProviderTree.get<std::string>("<xmlattr>.id", "");
    if(providerId == "deleter")
        m_deleterCodeProvider = codeProvider;
}

void IATDeleterEngine::registerWildcards()
{
}