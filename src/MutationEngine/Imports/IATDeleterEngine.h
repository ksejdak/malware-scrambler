#ifndef IATDELETERENGINE_H
#define IATDELETERENGINE_H

#include "MutationEngine\MutationEngineCommon\IMutationEngine.h"
#include "Utils\XMLParser\IXMLParser.h"
#include "Utils\CodeProvider\ICodeProvider.h"

#include <vector>
#include <string>
#include <memory>
#include <boost\property_tree\ptree.hpp>

class IATDeleterEngine : public IMutationEngine, public IXMLParser
{
public:
    /// @brief Constructor
    /// @param [in] engineTree      property tree describing engine
    IATDeleterEngine(const boost::property_tree::ptree& engineTree);

    /// @brief Virtual destructor
    virtual ~IATDeleterEngine() {}

    /// @see IMutationEngine::mutate
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context);

private:
    /// @see IXMLParser::initRequiredSubnodes
    virtual std::vector<std::string>& getRequiredSubnodes();

    /// @brief Reads XML configuration subtree
    /// @param [in] configurationTree   XML configuration subtree
    void readConfiguration(const boost::property_tree::ptree& configurationTree);

    /// @brief Reads XML code provider subtree
    /// @param [in] codeProviderTree    XML code provider subtree
    void readCodeProvider(const boost::property_tree::ptree& codeProviderTree);

    /// @brief Adds wildcards in code provider
    /// @param [in] offsetToOriginalImports         offset from first byte after resovler to original imports
    /// @param [in] importsAfterResolver            true if original imports have greater RVA than resolver, false otherwise
    /// @param [in] offsetToExiledImports           offset from first byte after resolver to exiled imports
    /// @param [in] importsSize                     size of exiled imports
    /// @param [in] baseAddress                     base address of mutated module
    void registerWildcards(unsigned long offsetToOriginalImports, bool importsAfterResolver, unsigned long offsetToExiledImports, size_t importsSize, unsigned long baseAddress);

private:
    bool m_isFirst;
    std::string m_encryptionKey;
    std::shared_ptr<ICodeProvider> m_resolverCodeProvider;
};

#endif