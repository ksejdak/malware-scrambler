#ifndef CODERELOCATIONENGINE_H
#define CODERELOCATIONENGINE_H

#include "MutationEngine\MutationEngineCommon\IMutationEngine.h"
#include "Utils\XMLParser\IXMLParser.h"

#include <string>
#include <memory>
#include <boost\property_tree\ptree.hpp>

class CodeRelocationEngine : public IMutationEngine, public IXMLParser
{
public:
    /// @brief Constructor
    /// @param [in] engineTree      property tree describing engine
    CodeRelocationEngine(const boost::property_tree::ptree& engineTree);

    /// @brief Virtual destructor
    virtual ~CodeRelocationEngine() {}

    /// @see IMutationEngine::mutate
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context);

    enum SourceType
    {
        CODE_PROVIDERS,
        CONTEXT
    };

private:
    /// @see IXMLParser::initRequiredSubnodes
    virtual std::vector<std::string>& getRequiredSubnodes();

    /// @brief Reads XML configuration subtree
    /// @param [in] configurationTree   XML configuration subtree
    void readConfiguration(const boost::property_tree::ptree& configurationTree);

    /// @brief Computes address of code to be relocated and its size
    /// @param [out] sourceRVA          RVA of code to be relocated
    /// @param [out] relocationSize     size of code to be relocated
    /// @param [in] PE                  file to be mutated
    /// @param [in] context             mutation engine context
    void computeRelocationOptions(unsigned long& sourceRVA, size_t& relocationSize, std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context);

private:
    std::string m_id;
    SourceType m_sourceType;
};

#endif