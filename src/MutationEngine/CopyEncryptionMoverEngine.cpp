#include "CopyEncryptionMoverEngine.h"
#include "PortableExecutable\PortableExecutableCommon\CodeSectionLayoutAnalyzer.h"
#include "Utils\Debug\Debug.h"
#include "Utils\CodeProvider\ICodeProvider.h"

CopyEncryptionMoverEngine::CopyEncryptionMoverEngine(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("CopyEncryptionMoverEngine")
{
}

void CopyEncryptionMoverEngine::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    LOG_EMPTY();
    LOG_INFO("Starting mutation...");

    size_t exiledCodeSize = 0;

    std::vector<const boost::property_tree::ptree>& registeredCodeProviders = ICodeProvider::getRegisteredCodeProviders();
    for(const boost::property_tree::ptree providerTree : registeredCodeProviders)
    {
        std::shared_ptr<ICodeProvider> codeProvider = ICodeProvider::create(providerTree, false);
        exiledCodeSize += codeProvider->getUserCode(true).size();
    }

    // get code section
    unsigned long entryPointRVA = PE->getNTHeaders()->OptionalHeader.AddressOfEntryPoint;
    std::shared_ptr<PESection> codeSection = PE->RVAToSection(entryPointRVA);
    std::shared_ptr<std::vector<uint8_t>> code = codeSection->getData();

    // get last section
    std::string lastSectionName = PE->getSectionsOrder().back();
    std::shared_ptr<PESection> lastSection = PE->getSections()[lastSectionName];
    std::shared_ptr<std::vector<uint8_t>> lastSectionData = lastSection->getData();

    // move code from code section to last section
    CodeSectionLayoutAnalyzer codeSectionLayoutAnalyzer;
    size_t codeBeginningOffset = codeSectionLayoutAnalyzer.checkCodeBeginningOffset(entryPointRVA, PE);
    size_t oldDataSize = lastSection->getDataSize();
    lastSectionData->insert(lastSectionData->end(), code->begin() + codeBeginningOffset, code->begin() + codeBeginningOffset + exiledCodeSize);
    unsigned long exiledCodeRVA = lastSection->getSectionHeader()->VirtualAddress + (lastSection->isShrinked() ? lastSection->getVirtualSize() : oldDataSize);

    // update context for other copy encryption modules
    context["exiledCodeSize"] = std::to_string(exiledCodeSize);
    context["exiledCodeRVA"] = std::to_string(exiledCodeRVA);

    registeredCodeProviders.clear();

    LOG_INFO("Mutation success!");
}