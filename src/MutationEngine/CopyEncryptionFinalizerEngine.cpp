#include "CopyEncryptionFinalizerEngine.h"
#include "PortableExecutable\PortableExecutableCommon\CodeSectionLayoutAnalyzer.h"
#include "Utils\Debug\Debug.h"

#include <boost\assign\list_of.hpp>

static const std::string OFFSET_FROM_ENTRY_POINT_WILDCARD    = "<OFFSET_FROM_ENTRY_POINT>";
static const std::string OFFSET_FROM_CODE_BEGINNING_WILDCARD = "<OFFSET_FROM_CODE_BEGINNING>";
static const std::string OFFSET_TO_EXILED_CODE_WILDCARD      = "<OFFSET_TO_EXILED_CODE>";
static const std::string EXILED_CODE_SIZE_WILDCARD           = "<EXILED_CODE_SIZE>";

CopyEncryptionFinalizerEngine::CopyEncryptionFinalizerEngine(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("CopyEncryptionFinalizerEngine")
    , IXMLParser("CopyEncryptionFinalizerEngine")
{
    validateSubtree(engineTree);

    for(const boost::property_tree::ptree::value_type& node : engineTree)
    {
        std::string nodeName = node.first.data();
        if(!findInRequiredSubnodes(nodeName))
            continue;

        if(nodeName == "CodeProvider")
            readCodeProvider(node.second);
    }
}

void CopyEncryptionFinalizerEngine::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    LOG_EMPTY();
    LOG_INFO("Starting mutation...");

    // retrieve exiled code size
    auto exiledCodeSizeIt = context.find("exiledCodeSize");
    if(exiledCodeSizeIt == context.end())
        throw std::runtime_error(MODULE_NAME + " copy encryption finalizer engine does not inherit exiledCodeSize");

    std::string exiledCodeSizeStr = exiledCodeSizeIt->second;
    size_t exiledCodeSize = static_cast<size_t>(std::stoul(exiledCodeSizeStr.c_str(), 0));

    // retrieve exiled code RVA
    auto exiledCodeRVAIt = context.find("exiledCodeRVA");
    if(exiledCodeRVAIt == context.end())
        throw std::runtime_error(MODULE_NAME + " copy encryption finalizer engine does not inherit exiledCodeRVA");

    std::string exiledCodeRVAStr = exiledCodeRVAIt->second;
    unsigned long exiledCodeRVA = std::stoul(exiledCodeRVAStr.c_str(), 0);

    unsigned long entryPointRVA = PE->getNTHeaders()->OptionalHeader.AddressOfEntryPoint;
    std::shared_ptr<PESection> codeSection = PE->RVAToSection(entryPointRVA);
    std::shared_ptr<std::vector<uint8_t>> code = codeSection->getData();

    unsigned long entryPointOffset = entryPointRVA - codeSection->getSectionHeader()->VirtualAddress;
    size_t finalizerOffset = code->size() - entryPointOffset;
    CodeSectionLayoutAnalyzer codeSectionLayoutAnalyzer;
    size_t codeBeginningOffset = codeSectionLayoutAnalyzer.checkCodeBeginningOffset(entryPointRVA, PE);
    size_t codeBeginningToEntryPointOffset = entryPointOffset - codeBeginningOffset;
    size_t codeBeginningRVA = entryPointRVA - (entryPointOffset - codeBeginningOffset);
    size_t exiledCodeOffset = exiledCodeRVA - entryPointRVA;

    SHOW_HEX(entryPointRVA);
    SHOW_HEX(entryPointOffset);
    SHOW_HEX(finalizerOffset);
    SHOW_HEX(exiledCodeOffset);
    SHOW_HEX(exiledCodeSize);

    registerWildcards(finalizerOffset, codeBeginningToEntryPointOffset, exiledCodeOffset, exiledCodeSize);
    std::vector<uint8_t> finalizerCode = m_codeProvider->getUserCode();

    // insert finalizer at the end of code segment
    code->insert(code->end(), finalizerCode.begin(), finalizerCode.end());

    // set new entry point
    PE->getNTHeaders()->OptionalHeader.AddressOfEntryPoint = codeBeginningRVA;

    LOG_INFO("Mutation success!");
}

std::vector<std::string>& CopyEncryptionFinalizerEngine::getRequiredSubnodes()
{
    static std::vector<std::string> requiredSubnodes = boost::assign::list_of("CodeProvider")
                                                                             ;
    return requiredSubnodes;
}

void CopyEncryptionFinalizerEngine::readCodeProvider(const boost::property_tree::ptree& codeProviderTree)
{
    m_codeProvider = ICodeProvider::create(codeProviderTree, false);
}

void CopyEncryptionFinalizerEngine::registerWildcards(size_t finalizerOffset, size_t codeBeginningToEntryPointOffset, size_t exiledCodeOffset, size_t exiledCodeSize)
{
    std::stringstream finalizerOffsetStr;
    finalizerOffsetStr << std::hex << std::showbase << finalizerOffset;

    std::stringstream codeBeginningToEntryPointOffsetStr;
    codeBeginningToEntryPointOffsetStr << std::hex << std::showbase << codeBeginningToEntryPointOffset;

    std::stringstream exiledCodeOffsetStr;
    exiledCodeOffsetStr << std::hex << std::showbase << exiledCodeOffset;

    std::stringstream exiledCodeSizeStr;
    exiledCodeSizeStr << std::hex << std::showbase << exiledCodeSize;

    m_codeProvider->addWildcard(OFFSET_FROM_ENTRY_POINT_WILDCARD, finalizerOffsetStr.str());
    m_codeProvider->addWildcard(OFFSET_FROM_CODE_BEGINNING_WILDCARD, codeBeginningToEntryPointOffsetStr.str());
    m_codeProvider->addWildcard(OFFSET_TO_EXILED_CODE_WILDCARD, exiledCodeOffsetStr.str());
    m_codeProvider->addWildcard(EXILED_CODE_SIZE_WILDCARD, exiledCodeSizeStr.str());
}