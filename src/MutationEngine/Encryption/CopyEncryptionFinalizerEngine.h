#ifndef COPYENCYPTIONFINALIZERENGINE_H
#define COPYENCYPTIONFINALIZERENGINE_H

#include "MutationEngine\MutationEngineCommon\IMutationEngine.h"
#include "Utils\XMLParser\IXMLParser.h"
#include "Utils\CodeProvider\ICodeProvider.h"

#include <string>
#include <memory>
#include <boost\property_tree\ptree.hpp>

class CopyEncryptionFinalizerEngine : public IMutationEngine, public IXMLParser
{
public:
    /// @brief Constructor
    /// @param [in] engineTree                          property tree describing engine
    CopyEncryptionFinalizerEngine(const boost::property_tree::ptree& engineTree);

    /// @brief Virtual destructor
    virtual ~CopyEncryptionFinalizerEngine() {}

    /// @see IMutationEngine::mutate
    virtual void mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context);

private:
    /// @see IXMLParser::initRequiredSubnodes
    virtual std::vector<std::string>& getRequiredSubnodes();

    /// @brief Reads XML code provider subtree
    /// @param [in] codeProviderTree                    XML code provider subtree
    void readCodeProvider(const boost::property_tree::ptree& codeProviderTree);

    /// @brief Adds wildcards in code provider
    /// @param [in] finalizerOffset                     offset from entry point to finalizer
    /// @param [in] codeBeginningToEntryPointOffset     offset from entry point to beginning of code
    /// @param [in] exiledCodeOffset                    offset from entry point to exiled code
    /// @param [in] exiledCodeSize                      size of exiled code
    void registerWildcards(size_t finalizerOffset, size_t codeBeginningToEntryPointOffset, size_t exiledCodeOffset, size_t exiledCodeSize);

private:
    std::shared_ptr<ICodeProvider> m_finalizerCodeProvider;
};

#endif