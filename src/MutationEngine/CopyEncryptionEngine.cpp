#include "CopyEncryptionEngine.h"
#include "Utils\Debug\Debug.h"

#include <boost\assign\list_of.hpp>

static const std::string IS_LAST_WILDCARD            = "<IS_LAST>";
static const std::string DECODER_KEY_WILDCARD        = "<DECODER_KEY>";
static const std::string SPARED_CODE_SIZE_WILDCARD   = "<SPARED_CODE_SIZE>";
static const std::string EXILED_CODE_SIZE_WILDCARD   = "<EXILED_CODE_SIZE>";
static const std::string EXILED_CODE_OFFSET_WILDCARD = "<EXILED_CODE_OFFSET>";
static const std::string FINALIZER_OFFSET_WILDCARD   = "<FINALIZER_OFFSET>";

CopyEncryptionEngine::CopyEncryptionEngine(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("CopyEncryptionEngine")
    , IXMLParser("CopyEncryptionEngine")
{
    validateSubtree(engineTree);

    for(const boost::property_tree::ptree::value_type& node : engineTree)
    {
        std::string nodeName = node.first.data();
        if(!findInRequiredSubnodes(nodeName))
            continue;

        if(nodeName == "Configuration")
            readConfiguration(node.second);
        else if(nodeName == "CodeProvider")
            readCodeProvider(node.second);
    }
}

void CopyEncryptionEngine::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    unsigned long entryPointRVA = PE->getNTHeaders()->OptionalHeader.AddressOfEntryPoint;
    unsigned long baseOfCode = PE->getNTHeaders()->OptionalHeader.BaseOfCode;
    unsigned long entryPointOffset = entryPointRVA - baseOfCode;

    size_t prevDecodersSize = 0;

    // if not first decoder, get data from previous decoders
    if(!m_isFirst)
    {
        // retrieve previous decoders size
        auto prevDecodersSizeIt = context.find("prevDecodersSize");
        if(prevDecodersSizeIt == context.end())
            throw std::runtime_error(MODULE_NAME + " not first copy encryption engine does not inherit prevDecodersSize");

        std::string prevDecodersSizeStr = prevDecodersSizeIt->second;
        prevDecodersSize = static_cast<size_t>(std::stoul(prevDecodersSizeStr.c_str(), 0));
    }

    // retrieve exiled code size
    auto exiledCodeSizeIt = context.find("exiledCodeSize");
    if(exiledCodeSizeIt == context.end())
        throw std::runtime_error(MODULE_NAME + " copy encryption engine does not inherit exiledCodeSize");

    std::string exiledCodeSizeStr = exiledCodeSizeIt->second;
    size_t exiledCodeSize = static_cast<size_t>(std::stoul(exiledCodeSizeStr.c_str(), 0));

    // retrieve exiled code RVA
    auto exiledCodeRVAIt = context.find("exiledCodeRVA");
    if(exiledCodeRVAIt == context.end())
        throw std::runtime_error(MODULE_NAME + " copy encryption engine does not inherit exiledCodeRVA");

    std::string exiledCodeRVAStr = exiledCodeRVAIt->second;
    unsigned long exiledCodeRVA = std::stoul(exiledCodeRVAStr.c_str(), 0);

    std::shared_ptr<PESection> codeSection = PE->RVAToSection(baseOfCode);
    std::shared_ptr<std::vector<uint8_t>> code = codeSection->getData();

    std::vector<uint8_t> decoderCode = m_codeProvider->getUserCode();

    size_t codeSize = checkRealCodeSize(entryPointRVA, PE);
    size_t sparedCodeSize = codeSize - prevDecodersSize;
    size_t codeEnd = entryPointOffset + codeSize;
    size_t finalizerOffset = code->size() - (entryPointOffset + prevDecodersSize + decoderCode.size());
    size_t exiledCodeOffset = exiledCodeRVA - (entryPointRVA + prevDecodersSize);

    SHOW_HEX(entryPointRVA);
    SHOW_HEX(entryPointOffset);
    SHOW_HEX(codeSize);
    SHOW_HEX(codeEnd);
    SHOW_HEX(prevDecodersSize);
    SHOW_HEX(sparedCodeSize);
    SHOW_HEX(exiledCodeSize);
    SHOW_HEX(exiledCodeOffset);
    SHOW_HEX(finalizerOffset);

    registerWildcards(sparedCodeSize, exiledCodeSize, exiledCodeOffset, finalizerOffset);

    // encode spared code (without additional data directory data)
    uint8_t encryptionKeyByte = static_cast<uint8_t>(std::stoul(m_encryptionKey.c_str(), 0, 16));
    for(unsigned int i = entryPointOffset + prevDecodersSize; i < codeEnd; ++i)
        code->at(i) ^= encryptionKeyByte;

    // encode exiled code
    std::shared_ptr<PESection> exiledCodeSection = PE->RVAToSection(exiledCodeRVA);
    unsigned long exiledCodeInternalOffset = exiledCodeRVA - exiledCodeSection->getSectionHeader()->VirtualAddress;
    std::shared_ptr<std::vector<uint8_t>> exiledCode = exiledCodeSection->getData();

    for(unsigned int i = exiledCodeInternalOffset; i < exiledCode->size(); ++i)
        exiledCode->at(i) ^= encryptionKeyByte;

    // insert decoder at the beginning of code segment (but after all previous decoders)
    code->insert(code->begin() + prevDecodersSize, decoderCode.begin(), decoderCode.end());

    // make code and exiled segments writeable
    codeSection->getSectionHeader()->Characteristics |= IMAGE_SCN_MEM_WRITE;
    exiledCodeSection->getSectionHeader()->Characteristics |= IMAGE_SCN_MEM_WRITE;

    // set flag indicating that binary has to be loaded at preferred location
    PE->getNTHeaders()->FileHeader.Characteristics |= IMAGE_FILE_RELOCS_STRIPPED;

    // update context in case other encryption modules will use it
    prevDecodersSize += decoderCode.size();
    context["prevDecodersSize"] = std::to_string(prevDecodersSize);
}

std::vector<std::string>& CopyEncryptionEngine::getRequiredSubnodes()
{
    static std::vector<std::string> requiredSubnodes = boost::assign::list_of("Configuration")
                                                                             ("CodeProvider")
                                                                             ;
    return requiredSubnodes;
}

void CopyEncryptionEngine::readConfiguration(const boost::property_tree::ptree& configurationTree)
{
    m_isFirst = configurationTree.get<bool>("<xmlattr>.isFirst", false);
    m_isLast = configurationTree.get<bool>("<xmlattr>.isLast", false);
    m_encryptionKey = configurationTree.get<std::string>("<xmlattr>.encryptionKey", "");
}

void CopyEncryptionEngine::readCodeProvider(const boost::property_tree::ptree& codeProviderTree)
{
    m_codeProvider = ICodeProvider::create(codeProviderTree);
}

unsigned long CopyEncryptionEngine::checkRealCodeSize(unsigned long entryPointRVA, std::shared_ptr<PEFile> PE)
{
    unsigned long baseOfCode = PE->getNTHeaders()->OptionalHeader.BaseOfCode;
    std::shared_ptr<PESection> codeSection = PE->RVAToSection(baseOfCode);
    std::shared_ptr<DataDirectory> dataDirectory = PE->getDataDirectory();

    unsigned long minimalRVA = baseOfCode + codeSection->getDataSize();
    for(int i = 0; i < IMAGE_NUMBEROF_DIRECTORY_ENTRIES - 1; ++i)
    {
        DataDirectoryType dataDirectoryType = static_cast<DataDirectoryType>(i);
        std::shared_ptr<DataDirectoryEntry> dataDirectoryEntry = dataDirectory->getEntry(dataDirectoryType);

        try
        {
            unsigned long dataDirectoryEntryRVA = dataDirectoryEntry->getRVA();
            std::string holdingSectionName = PE->RVAToSection(dataDirectoryEntryRVA)->getName();
            if(holdingSectionName == codeSection->getName() && dataDirectoryEntryRVA > entryPointRVA)
                minimalRVA = std::min<unsigned long>(minimalRVA, dataDirectoryEntry->getRVA());
        }
        catch(const std::exception&)
        {
            // in case of bound IAT, pass through
        }
    }

    unsigned long realCodeSize = minimalRVA - entryPointRVA;
    return realCodeSize;
}

void CopyEncryptionEngine::registerWildcards(size_t sparedCodeSize, size_t exiledCodeSize, size_t exiledCodeOffset, size_t finalizerOffset)
{
    std::stringstream isLastStr;
    isLastStr << "0x" << std::hex << (m_isLast ? 1 : 0);

    std::stringstream sparedCodeSizeStr;
    sparedCodeSizeStr << "0x" << std::hex << sparedCodeSize;

    std::stringstream exiledCodeSizeStr;
    exiledCodeSizeStr << "0x" << std::hex << exiledCodeSize;

    std::stringstream exiledCodeOffsetStr;
    exiledCodeOffsetStr << "0x" << std::hex << exiledCodeOffset;

    std::stringstream finalizerOffsetStr;
    finalizerOffsetStr << "0x" << std::hex << finalizerOffset;

    m_codeProvider->addWildcard(IS_LAST_WILDCARD, isLastStr.str());
    m_codeProvider->addWildcard(DECODER_KEY_WILDCARD, m_encryptionKey);
    m_codeProvider->addWildcard(SPARED_CODE_SIZE_WILDCARD, sparedCodeSizeStr.str());
    m_codeProvider->addWildcard(EXILED_CODE_SIZE_WILDCARD, exiledCodeSizeStr.str());
    m_codeProvider->addWildcard(EXILED_CODE_OFFSET_WILDCARD, exiledCodeOffsetStr.str());
    m_codeProvider->addWildcard(FINALIZER_OFFSET_WILDCARD, finalizerOffsetStr.str());
    
}