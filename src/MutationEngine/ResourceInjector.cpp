#include "ResourceInjector.h"
#include "PortableExecutable\Resources\ResourcesSection.h"
#include "Utils\Debug\Debug.h"

#include <stdexcept>
#include <fstream>

ResourceInjector::ResourceInjector(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("ResourceInjector")
{
    bool resourcesFound = false;
    for(const boost::property_tree::ptree::value_type& node : engineTree)
    {
        if(std::string(node.first.data()) != "Resource")
            continue;

        std::string resourcePath = node.second.get<std::string>("<xmlattr>.path", "");
        std::string resourceType = node.second.get<std::string>("<xmlattr>.type", "");
        std::string firstDirId = node.second.get<std::string>("<xmlattr>.firstDirId", "");
        std::string secondDirId = node.second.get<std::string>("<xmlattr>.secondDirId", "");

        if(resourcePath == "" || resourceType == "" || firstDirId == "" || secondDirId == "")
            throw std::runtime_error(MODULE_NAME + " one or more attributes is empty in Resource node");

        std::shared_ptr<NewResource> resource(new NewResource());

        std::stringstream ss;
        ss << resourceType;
        ss >> resource->type;

        ss.str("");
        ss.clear();
        ss << firstDirId;
        ss >> resource->firstDirectoryId;

        ss.str("");
        ss.clear();
        ss << secondDirId;
        ss >> resource->secondDirectoryId;

        if(!boost::filesystem::exists(resourcePath))
        {
            std::stringstream errMsg;
            errMsg << MODULE_NAME + " file \"" << resourcePath << "\" does not exist";
            throw std::runtime_error(errMsg.str());
        }

        size_t resourceSize = (size_t)boost::filesystem::file_size(resourcePath);
        std::ifstream resourceFile(resourcePath, std::ios::in | std::ios::binary);
        resource->data.reset(new std::vector<uint8_t>(resourceSize));
        resourceFile.read(reinterpret_cast<char*>(resource->data->data()), resourceSize);
        resourceFile.close();

        m_resources.push_back(resource);
        resourcesFound = true;
    }

    if(!resourcesFound)
        throw std::runtime_error(MODULE_NAME + " no Resource node found in Engine node");
}

void ResourceInjector::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    unsigned long resourceDirectoryRVA = PE->getNTHeaders()->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE].VirtualAddress;

    std::shared_ptr<PESection> section = PE->RVAToSection(resourceDirectoryRVA);
    std::shared_ptr<ResourcesSection> resourceSection = std::static_pointer_cast<ResourcesSection>(section);

    size_t sizeDelta = 0;
    for(std::shared_ptr<NewResource> resource : m_resources)
        sizeDelta += resourceSection->addNewResource(resource);
}