#include "ResourceInjector.h"
#include "PortableExecutable\Resources\ResourcesSection.h"
#include "Utils\Debug\Debug.h"

#include <stdexcept>
#include <fstream>
#include <boost\assign\list_of.hpp>

ResourceInjector::ResourceInjector(const boost::property_tree::ptree& engineTree)
    : IMutationEngine("ResourceInjector")
    , IXMLParser("ResourceInjector")
{
    validateSubtree(engineTree);

    for(const boost::property_tree::ptree::value_type& node : engineTree)
    {
        std::string nodeName = node.first.data();
        if(!findInRequiredSubnodes(nodeName))
            continue;

        if(nodeName == "Resource")
            readResource(node.second);
    }
}

void ResourceInjector::mutate(std::shared_ptr<PEFile> PE, std::map<std::string, std::string>& context)
{
    unsigned long resourceDirectoryRVA = PE->getNTHeaders()->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE].VirtualAddress;

    std::shared_ptr<PESection> section = PE->RVAToSection(resourceDirectoryRVA);
    std::shared_ptr<ResourcesSection> resourceSection = std::static_pointer_cast<ResourcesSection>(section);

    size_t sizeDelta = 0;
    for(std::shared_ptr<NewResource> resource : m_resources)
        sizeDelta += resourceSection->addNewResource(resource);
}

std::vector<std::string>& ResourceInjector::getRequiredSubnodes()
{
    static std::vector<std::string> requiredSubnodes = boost::assign::list_of("*Resource")
                                                                             ;
    return requiredSubnodes;
}

void ResourceInjector::readResource(const boost::property_tree::ptree& resourceTree)
{
    std::shared_ptr<NewResource> resource(new NewResource());

    std::string resourcePath    = resourceTree.get<std::string>("<xmlattr>.path", "");
    resource->type              = resourceTree.get<unsigned int>("<xmlattr>.type", 0);
    resource->firstDirectoryId  = resourceTree.get<unsigned int>("<xmlattr>.firstDirId", 0);
    resource->secondDirectoryId = resourceTree.get<unsigned int>("<xmlattr>.secondDirId", 0);

    if(resourcePath == "" || resource->type == 0 || resource->firstDirectoryId == 0 || resource->secondDirectoryId == 0)
        throw std::runtime_error(MODULE_NAME + " one or more attributes is empty in Resource node");

    if(!boost::filesystem::exists(resourcePath))
    {
        std::stringstream errMsg;
        errMsg << MODULE_NAME + " file \"" << resourcePath << "\" does not exist";
        throw std::runtime_error(errMsg.str());
    }

    size_t resourceSize = (size_t) boost::filesystem::file_size(resourcePath);
    std::ifstream resourceFile(resourcePath, std::ios::in | std::ios::binary);
    resource->data.reset(new std::vector<uint8_t>(resourceSize));
    resourceFile.read(reinterpret_cast<char*>(resource->data->data()), resourceSize);
    resourceFile.close();

    m_resources.push_back(resource);
}