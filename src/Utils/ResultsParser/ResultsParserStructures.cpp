#include "ResultsParserStructures.h"
#include "Utils\Debug\Debug.h"

#include <sstream>
#include <boost\range\adaptors.hpp>

MutationSet::MutationSet(std::string name)
    : m_name(name)
    , m_samplesCounter(0)
{
}

std::string MutationSet::getName()
{
    return m_name;
}

void MutationSet::countNextSample()
{
    ++m_samplesCounter;
}

void MutationSet::addAntiVirusResult(std::string antiVirusName, bool wasDetected)
{
    unsigned int value = (wasDetected) ? 1 : 0;
    if(m_antiVirusResults.find(antiVirusName) == m_antiVirusResults.end())
        m_antiVirusResults[antiVirusName] = value;
    else
        m_antiVirusResults[antiVirusName] += value;
}

double MutationSet::getDetectionRate(std::string antiVirusName)
{
    return (((double) m_antiVirusResults[antiVirusName] * 100.0) / m_samplesCounter);
}

double MutationSet::getOverallDetectionRate()
{
    double overallDetectionRate = 0.0;
    for(std::string antiVirusName : m_antiVirusResults | boost::adaptors::map_keys)
        overallDetectionRate += getDetectionRate(antiVirusName);

    return (overallDetectionRate / m_antiVirusResults.size());
}

unsigned int MutationSet::getSamplesCount()
{
    return m_samplesCounter;
}

void MutationSet::printResults()
{
    for(std::string antiVirusName : m_antiVirusResults | boost::adaptors::map_keys)
    {
        std::stringstream msg;
        msg << std::setw(20) << std::left << antiVirusName                   << ": "
            << std::setprecision(4)       << getDetectionRate(antiVirusName) << "%";
        LOG_INFO(msg.str());
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

AntiVirus::AntiVirus(std::string name)
    : m_name(name)
{
}

std::string AntiVirus::getName()
{
    return m_name;
}

void AntiVirus::addMutationSetResult(std::string mutationSetName, bool wasDetected)
{
    unsigned int value = (wasDetected) ? 1 : 0;
    if(m_mutationSetResults.find(mutationSetName) == m_mutationSetResults.end())
    {
        m_mutationSetResults[mutationSetName] = value;
        m_mutationSetSamples[mutationSetName] = 1;
    }
    else
    {
        m_mutationSetResults[mutationSetName] += value;
        m_mutationSetSamples[mutationSetName] += 1;
    }
}

double AntiVirus::getDetectionRate(std::string mutationSetName)
{
    return (((double) m_mutationSetResults[mutationSetName] * 100.0) / m_mutationSetSamples[mutationSetName]);
}

double AntiVirus::getOverallDetectionRate()
{
    double overallDetectionRate = 0.0;
    for(std::string mutationSetName : m_mutationSetResults | boost::adaptors::map_keys)
        overallDetectionRate += getDetectionRate(mutationSetName);

    return (overallDetectionRate / m_mutationSetResults.size());
}

std::pair<std::string, double> AntiVirus::getBestMutationSet()
{
    std::pair<std::string, double> bestMutationSet = std::make_pair("", 100.0);
    for(std::string mutationSetName : m_mutationSetResults | boost::adaptors::map_keys)
    {
        double detectionRate = getDetectionRate(mutationSetName);
        if(detectionRate <= bestMutationSet.second)
        {
            bestMutationSet.first = mutationSetName;
            bestMutationSet.second = detectionRate;
        }
    }

    return bestMutationSet;
}