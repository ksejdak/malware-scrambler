#include "ResultsParser.h"
#include "ResultsParserDefaults.h"
#include "Utils\Debug\Debug.h"

#include <stdexcept>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <boost\filesystem.hpp>

static const std::string REPORT_STRING             = "scanReports";
static const std::string RESPONSE_FILE_STRING      = "Response [file";
static const std::string AV_RESULT_STRING          = "AV";
static const int REPORTS_DELIMITER_SIZE            = 157;

bool isOverallBetter(std::shared_ptr<MutationSet> a, std::shared_ptr<MutationSet> b)
{
    return a->getOverallDetectionRate() < b->getOverallDetectionRate();
}

void ResultsParser::run()
{
    boost::filesystem::directory_iterator dirItEnd;
    for(boost::filesystem::directory_iterator dirIt(DEFAULT_RESULTS_DIR); dirIt != dirItEnd; ++dirIt)
    {
        if(!boost::filesystem::is_regular_file(dirIt->status()))
            continue;

        std::string filename = dirIt->path().string();
        if(filename.find(REPORT_STRING) == std::string::npos)
            continue;

        processOneFile(filename);
    }

    printResults();
    LOG_INFO("====================== FINISHED ======================");
}

void ResultsParser::processOneFile(const std::string& reportFilePath)
{
    std::ifstream reportFile(reportFilePath, std::ios::in);
    std::string line;

    while(std::getline(reportFile, line))
    {
        if(std::count(line.begin(), line.end(), '-') == REPORTS_DELIMITER_SIZE)
            parseOneSampleFile(reportFile);
    }

    reportFile.close();
}

void ResultsParser::parseOneSampleFile(std::ifstream& reportFile)
{
    std::shared_ptr<MutationSet> mutationSet;
    std::string line;

    while(std::getline(reportFile, line))
    {
        if(line.find(RESPONSE_FILE_STRING) != std::string::npos)
        {
            boost::filesystem::path samplePath = line.substr(22);
            std::string mutationSetName = samplePath.parent_path().filename().string();
            mutationSet = getMutationSet(mutationSetName);
            mutationSet->countNextSample();
            continue;
        }

        if(line.find(AV_RESULT_STRING) != std::string::npos)
        {
            std::string antiVirusName = line.substr(4, 21);
            antiVirusName.erase(remove_if(antiVirusName.begin(), antiVirusName.end(), isspace), antiVirusName.end());

            std::string wasDetected = line.substr(35, 5);
            wasDetected.erase(remove_if(wasDetected.begin(), wasDetected.end(), isspace), wasDetected.end());

            mutationSet->addAntiVirusResult(antiVirusName, (wasDetected == "True") ? true : false);
            continue;
        }
    }
}

std::shared_ptr<MutationSet> ResultsParser::getMutationSet(std::string name)
{
    for(std::shared_ptr<MutationSet> mutationSet : m_mutationSets)
    {
        if(mutationSet->getName() == name)
            return mutationSet;
    }

    std::shared_ptr<MutationSet> mutationSet(new MutationSet(name));
    m_mutationSets.push_back(mutationSet);

    return mutationSet;
}

void ResultsParser::printResults()
{
    LOG_INFO("====================== RESULTS PER MUTATION SET ======================");
    for(std::shared_ptr<MutationSet> mutationSet : m_mutationSets)
    {
        LOG_INFO("************** " + mutationSet->getName() + " **************");
        mutationSet->printResults();
    }
    LOG_EMPTY();

    LOG_INFO("====================== OVERALL MUTATION SETS RESULTS' ======================");
    std::sort(m_mutationSets.begin(), m_mutationSets.end(), isOverallBetter);
    for(std::shared_ptr<MutationSet> mutationSet : m_mutationSets)
    {
        std::stringstream msg;
        msg << "Detection rate for '" << std::setw(40) << std::left << mutationSet->getName()                 << "' "
            << "is: "                 << std::setprecision(4)       << mutationSet->getOverallDetectionRate() << "% "
            << "("                                                  << mutationSet->getSamplesCount()         << " samples)";
        LOG_INFO(msg.str());
    }
    LOG_EMPTY();

    LOG_INFO("====================== SUMMARY ======================");
    unsigned int mutatedFilesCount = 0;
    for(std::shared_ptr<MutationSet> mutationSet : m_mutationSets)
        mutatedFilesCount += mutationSet->getSamplesCount();

    LOG_INFO("Number of all new generated viruses: " + std::to_string(mutatedFilesCount));
    LOG_INFO("Best overall mutation set          : " + m_mutationSets.front()->getName());
    LOG_INFO("Worst overall mutation set         : " + m_mutationSets.back()->getName());
    LOG_EMPTY();
}