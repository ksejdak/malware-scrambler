#ifndef RESULTSPARSERSTRUCTURES_H
#define RESULTSPARSERSTRUCTURES_H

#include <string>
#include <map>

class MutationSet
{
public:
    /// @brief Constructor
    /// @param [in] name        mutation set name (same as in report filename)
    MutationSet(std::string name);

    /// @brief Returns mutation set name
    /// @retutn mutation set name
    std::string getName();

    /// @brief Increments samples counter
    void countNextSample();

    /// @brief Adds result for one AV
    /// @param [in] antiVirusName   AV name
    /// @param [in] wasDetected     flag indicating if this AV detected 
    void addAntiVirusResult(std::string antiVirusName, bool wasDetected);

    /// @brief Calculates and returns detection rate for demanded AV
    /// @param [in] antiVirusName   AV name
    /// @return detection rate
    double getDetectionRate(std::string antiVirusName);

    /// @brief Calculates and returns overall detection rate based on mean value of all detection rates
    /// @return overall detection rate
    double getOverallDetectionRate();

    /// @brief Returns samples count
    /// @return samples count
    unsigned int getSamplesCount();

    /// @brief Prints results for this mutation set
    void printResults();

private:
    std::string m_name;
    std::map<std::string, unsigned int> m_antiVirusResults;

    unsigned int m_samplesCounter;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AntiVirus
{
public:
    /// @brief Constructor
    /// @param [in] name        antivirus name
    AntiVirus(std::string name);

    /// @brief Returns antivirus name
    /// @retutn mutation set name
    std::string getName();

    /// @brief Adds result for one mutation set
    /// @param [in] mutationSetName     mutation set name
    /// @param [in] wasDetected         flag indicating if this AV detected 
    void addMutationSetResult(std::string mutationSetName, bool wasDetected);

    /// @brief Calculates and returns detection rate for demanded mutation set
    /// @param [in] mutationSetName     mutation set name
    /// @return detection rate
    double getDetectionRate(std::string mutationSetName);

    /// @brief Calculates and returns overall detection rate based on mean value of all detection rates
    /// @return overall detection rate
    double getOverallDetectionRate();

    /// @brief Checks which mutation set was best for this AV
    /// @return pair of mutation set name and detection rate for this AV
    std::pair<std::string, double> getBestMutationSet();

private:
    std::string m_name;
    std::map<std::string, unsigned int> m_mutationSetResults;
    std::map<std::string, unsigned int> m_mutationSetSamples;
};

#endif