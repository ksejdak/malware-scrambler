#ifndef ICODEPROVIDER_H
#define ICODEPROVIDER_H

#include "Utils\XMLParser\IXMLParser.h"

#include <vector>
#include <memory>
#include <map>
#include <string>
#include <boost\property_tree\ptree.hpp>
#include <boost\filesystem.hpp>

class ICodeProvider : public IXMLParser
{
public:
    /// @brief Creates code provider basing on provided XML subtree
    /// @param [in] codeProviderTree    XML code provider subtree
    /// @return pointer to code provider
    static std::shared_ptr<ICodeProvider> create(const boost::property_tree::ptree& codeProviderTree);

    /// @brief Returns registered code templates.
    /// @note This is a hack to allow CopyEncryptionMover to check size of all decoders before they are even compiled.
    /// @return Vector with filenames of code templates
    static std::vector<const boost::property_tree::ptree>& getRegisteredCodeProviders();

    /// @brief Default constructor
    /// @param [in] codeProviderTree    XML code provider subtree
    ICodeProvider(const boost::property_tree::ptree& codeProviderTree);

    /// @brief Virtual destructor
    virtual ~ICodeProvider() {}

    /// @brief Replaces wildcards in provided code template
    /// @param [in] wildcard            wildcard to be replaced
    /// @param [in] value               value to replace with
    void addWildcard(std::string wildcard, std::string value);

    /// @brief Retrievs user compiled code. Repalces wildcards and launches compilation if necessary
    /// @param [in] emulateWildcards    if true, then all wildcards between < > will be replaces by 0x0
    /// @return compiled user code
    std::vector<uint8_t> getUserCode(bool emulateWildcards = false);

protected:
    virtual void generateMachineCode() = 0;

private:
    virtual std::vector<std::string>& getRequiredSubnodes();
    void readCode(const boost::property_tree::ptree& codeTree);
    void readProvider(const boost::property_tree::ptree& providerTree);
    void replaceWildcards();
    void replaceEmulatedWildcards();

protected:
    bool m_isCompiled;
    std::map<std::string, std::string> m_wildcards;
    std::vector<uint8_t> m_userCode;

    std::string m_appName;
    std::string m_params;
    boost::filesystem::path m_inputPath;
    boost::filesystem::path m_processedInputPath;
    boost::filesystem::path m_outputPath;

private:
    static std::vector<const boost::property_tree::ptree> m_registeredCodeProviders;
};

#endif