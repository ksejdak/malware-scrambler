#ifndef TEMPLATECOMPILER_H
#define TEMPLATECOMPILER_H

/*
#include <string>
#include <vector>
#include <cstdint>
#include <boost\filesystem.hpp>

class TemplateAssembler
{
public:
    /// @brief Constructor
    /// @note  params must have FILE_WILDCARD wildcard that will be replaced with code file path
    /// @param [in] codePath        path to the file with assembly code
    /// @param [in] assemblerName   name of assembler binary
    /// @param [in] params          parameters that will be passed to the assembler
    TemplateAssembler(const boost::filesystem::path& codePath, std::string assemblerName, std::string params);

    /// @brief Launches assembler to generate binary code for given options
    void assemble();

    /// @brief Retrievs user compiled code
    /// @return compiled user code
    std::vector<uint8_t> getUserCode();
    
private:
    boost::filesystem::path m_codePath;
    std::string m_assemblerName;
    std::string m_params;
    boost::filesystem::path m_outputPath;
};
*/

#endif