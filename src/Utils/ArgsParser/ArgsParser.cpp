#include "ArgsParser.h"
#include "ArgsParserDefaults.h"
#include "Utils\Toolbox\Version.h"
#include "Utils\Debug\Debug.h"

#include <iostream>
#include <cstdlib>
#include <stdexcept>

void ArgsParser::parse(int argc, char* argv[])
{
    options::options_description mainOptions("Options");
    mainOptions.add_options()
        ("help,h", "print help message")
        ("input,i", options::value<std::string>(&m_mainOptions.inputPath)->default_value(DEFAULT_INPUT_PATH), "input file path to be scrambled")
        ("output,o", options::value<std::string>(&m_mainOptions.outputPath)->default_value(DEFAULT_OUTPUT_PATH), "output path")
        ("config,c", options::value<std::string>(&m_mainOptions.configPath)->default_value(DEFAULT_CONFIG_PATH), "config file path")
        ("virus-total,s", "send scrambled file to VirusTotal")
        ;

    m_options.add(mainOptions);

    options::variables_map vm;
    options::store(options::parse_command_line(argc, argv, m_options), vm);
    options::notify(vm);

    if(vm.count("help"))
    {
        std::cout << "Author     : " << PROGRAM_AUTHOR << std::endl;
        std::cout << "Version    : " << PROGRAM_VERSION << std::endl;
        std::cout << "Build date : " << BUILD_TIME << " " << BUILD_DATE << std::endl;
        std::cout << std::endl;
        std::cout << m_options << std::endl;
        exit(EXIT_SUCCESS);
    }

    // dummy check if all necessary arguments were provided
    if(!vm.count("input"))
        throw std::runtime_error(MODULE_NAME + " not all cmd line arguments were provided");
}

MainOptions& ArgsParser::getMainOptions()
{
    return m_mainOptions;
}