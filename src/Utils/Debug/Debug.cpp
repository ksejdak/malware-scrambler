#include "Debug.h"

#include <map>
#include <sstream>

void Logger::log(LogLevel level, std::string className, std::string msg)
{
    switch(level)
    {
    case LOG_LEVEL_ERROR:
        logError(className, msg);
        break;
    case LOG_LEVEL_INFO:
        logInfo(className, msg);
        break;
    case LOG_LEVEL_DEBUG:
        logDebug(className, msg);
        break;
    }
}

void Logger::logEmpty()
{
    // log to callback objects
    for(std::shared_ptr<LoggerCallback> callback : m_loggerCallbacks)
        callback->emptyCallback();

    // log to console
    std::cout << std::endl;
}

void Logger::registerCallback(std::shared_ptr<LoggerCallback> callback)
{
    m_loggerCallbacks.push_back(callback);
}

std::string Logger::moduleName(std::string className)
{
    return className.substr(6, className.size() - 6 - 2);
}

void Logger::logError(std::string className, std::string msg)
{
    std::stringstream ss;
    ss << "[ERROR] <" << moduleName(className) << "> " << msg << std::endl;

    // log to callback objects
    for(std::shared_ptr<LoggerCallback> callback : m_loggerCallbacks)
        callback->errorCallback(ss.str());

    // log to console
    std::cout << ss.str();
}

void Logger::logInfo(std::string className, std::string msg)
{
    std::stringstream ss;
    ss << "[INFO] <" << moduleName(className) << "> " << msg << std::endl;

    // log to callback objects
    for(std::shared_ptr<LoggerCallback> callback : m_loggerCallbacks)
        callback->infoCallback(ss.str());

    // log to console
    std::cout << ss.str();
}

void Logger::logDebug(std::string className, std::string msg)
{
    std::stringstream ss;
    ss << "[DEBUG] <" << moduleName(className) << "> " << msg << std::endl;

    // log to callback objects
    for(std::shared_ptr<LoggerCallback> callback : m_loggerCallbacks)
        callback->debugCallback(ss.str());

    // log to console
    std::cout << ss.str();
}