#ifndef DEBUG_H
#define DEBUG_H

#include "LoggerCallback.h"

#include <iostream>
#include <iomanip>
#include <memory>
#include <string>
#include <vector>
#include <typeinfo>

enum LogLevel
{
    LOG_LEVEL_ERROR,
    LOG_LEVEL_INFO,
    LOG_LEVEL_DEBUG
};

/// @brief Logging macros with different logging levels
#define LOG_ERROR(x)    Logger::getInstance().log(LOG_LEVEL_ERROR, typeid(this).name(), x)
#define LOG_INFO(x)     Logger::getInstance().log(LOG_LEVEL_INFO, typeid(this).name(), x)
#define LOG_DEBUG(x)    Logger::getInstance().log(LOG_LEVEL_DEBUG, typeid(this).name(), x)
#define LOG_EMPTY()     Logger::getInstance().logEmpty()

/// @brief Macro for formatting class/module name to format '<class_name>'
#define MODULE_NAME     std::string("<") + Logger::moduleName(typeid(this).name()) + std::string(">")

/// @brief Macros showing variable in decimal and hexadecimal format: 'viariable_name = viariable_value'
#define SHOW_VAR(x)     std::cout << "[DEBUG] " << #x << " = " << x << std::endl
#define SHOW_HEX(x)     std::cout << "[DEBUG] " << #x << " = " << std::showbase << std::hex << x << std::endl; std::cout << std::dec

class Logger
{
public:
    /// @brief Singleton function returning static Logger object
    /// @return Logger object
    static Logger& getInstance()
    {
        static Logger instance;
        return instance;
    }

    /// @brief Main logging function
    /// @note  Should not be used directly, use logging macros instead
    /// @param [in] level       logging level
    /// @param [in] className   name of class that called logger function
    /// @param [in] msg         logging message
    void log(LogLevel level, std::string className, std::string msg);

    /// @brief Prints only new line
    void logEmpty();

    /// @brief Registers
    void registerCallback(std::shared_ptr<LoggerCallback> callback);

    /// @brief Function for obtaining class/module name
    static std::string moduleName(std::string className);

private:
    /// @brief Private constructor
    Logger() {}

    /// @brief Specialized logging function for error messages
    /// @param [in] className   name of class that called logger function
    /// @param [in] msg         logging message
    void logError(std::string className, std::string msg);

    /// @brief Specialized logging function for info messages
    /// @param [in] className   name of class that called logger function
    /// @param [in] msg         logging message
    void logInfo(std::string className, std::string msg);

    /// @brief Specialized logging function for debug messages
    /// @param [in] className   name of class that called logger function
    /// @param [in] msg         logging message
    void logDebug(std::string className, std::string msg);

    /// @brief Function converting enum to string
    /// @param [in] level       logging level enum
    /// @return logging level string
    //std::string logLevelToStr(LogLevel level);

    std::vector<std::shared_ptr<LoggerCallback>> m_loggerCallbacks;
};

#endif