#include "IXMLParser.h"
#include "Utils\Debug\Debug.h"

#include <boost\assign\list_of.hpp>

IXMLParser::IXMLParser(std::string derivedModuleName)
    : m_derivedModuleName(derivedModuleName)
{
    m_excludedStrings = boost::assign::list_of("<xmlattr>")
                                              ;
}

bool IXMLParser::findInRequiredSubnodes(std::string& nodeName)
{
    std::vector<std::string>& requiredSubnodes = getRequiredSubnodes();
    for(std::string& requiredNode : requiredSubnodes)
    {
        if(requiredNode.find(nodeName) != std::string::npos)
        {
            if(requiredNode.find("+") != std::string::npos)
                nodeName = requiredNode;
            return true;
        }
    }

    return false;
}

void IXMLParser::validateSubtree(const boost::property_tree::ptree& engineTree)
{
    std::vector<std::string> foundSubnodes;
    for(const boost::property_tree::ptree::value_type& node : engineTree)
    {
        std::string nodeName = node.first.data();
        if(nodeName == m_derivedModuleName)
            continue;

        if(std::find(m_excludedStrings.begin(), m_excludedStrings.end(), nodeName) != m_excludedStrings.end())
            continue;

        if(!findInRequiredSubnodes(nodeName))
        {
            std::stringstream errMsg;
            errMsg << MODULE_NAME + " module [" << m_derivedModuleName << "] does not require subnode [" << nodeName << "]";
            throw std::runtime_error(errMsg.str());
        }

        foundSubnodes.push_back(nodeName);
    }

    std::vector<std::string>& requiredSubnodes = getRequiredSubnodes();
    std::sort(requiredSubnodes.begin(), requiredSubnodes.end());
    std::sort(foundSubnodes.begin(), foundSubnodes.end());

    auto diff = std::mismatch(foundSubnodes.begin(), foundSubnodes.end(), requiredSubnodes.begin());
    if(foundSubnodes.size() != requiredSubnodes.size() || diff.first != foundSubnodes.end())
    {
        std::stringstream errMsg;
        errMsg << MODULE_NAME + " module [" << m_derivedModuleName << "] has invalid XML subtree";
        throw std::runtime_error(errMsg.str());
    }
}