#ifndef IXMLPARSER_H
#define IXMLPARSER_H

#include <string>
#include <vector>
#include <boost\property_tree\ptree.hpp>

class IXMLParser
{
public:
    /// @brief Constructor
    /// @param [in] derivedModulename   name of module that will implement IXMLParser
    IXMLParser(std::string derivedModuleName);

protected:
    /// @brief Gets required subnodes' names
    /// @return required subnodes' names
    virtual std::vector<std::string>& getRequiredSubnodes() = 0;

    /// @brief Checks if given node name is required by this engine
    /// @note  May modify node name to match '+' or '*' convention if fits
    /// @param [in/out] nodeName        node name to be found
    /// @param [in]     modify          if true, then will be modified to match '+' or '*' convention if fits
    /// @return true if found, false otherwise
    bool findInRequiredSubnodes(std::string& nodeName, bool modify = false);

    /// @brief Checks if XML engine tree is valid according to its required subnodes
    /// @note  This method throws exception if tree is not valid
    /// @param [in] engineTree          property tree describing engine
    void validateSubtree(const boost::property_tree::ptree& engineTree);

private:
    /// @brief Throws error on parsing XML tree error
    void throwOnError();

private:
    std::string m_derivedModuleName;
    std::vector<std::string> m_excludedStrings;
};

#endif