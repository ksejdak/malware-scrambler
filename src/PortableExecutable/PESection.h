#ifndef PESECTION_H
#define PESECTION_H

#include <Windows.h>
#include <winnt.h>
#include <string>
#include <memory>
#include <vector>
#include <boost\shared_array.hpp>
#include <boost\cstdint.hpp>
#include <boost\filesystem\fstream.hpp>

class PESection
{
public:
    /// @brief Constructor with ready section header
    /// @param [in] sectionAlignment    section alignment in this PE file
    /// @param [in] sectionHeader       section header
    /// @param [in] image               image data 
    PESection(unsigned long sectionAlignment, std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader, boost::shared_array<uint8_t> image);

    /// @brief Virtual destructor
    virtual ~PESection() {}

    /// @brief Gets section name
    /// @return section name
    std::string getName();

    /// @brief Gets section size
    /// @return section size
    size_t getSize();

    /// @brief Gets section data
    /// @return section data
    std::shared_ptr<std::vector<uint8_t>> getData();

    /// @brief Gets section header from section
    /// @return section header
    std::shared_ptr<IMAGE_SECTION_HEADER> getSectionHeader();

    /// @brief Sets section name
    /// @param [in] name                section name
    void setName(std::string name);

    /// @brief Sets section data and its size
    /// @param [in] data                section data
    void setData(std::shared_ptr<std::vector<uint8_t>> data);

    /// @brief Sets section header
    /// @param [in] sectionHeader       section header
    void setSectionHeader(std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader);

    /// @brief Saves section to file
    /// @note  Function takes care about file alignment
    /// @param [in] file                output file stream
    virtual void save(boost::filesystem::ofstream& file);

protected:
    /// @brief Generates section header from section
    void generateSectionHeader();

    /// @brief Aligns section start according to section alignment
    /// @param [in]                     output file stream
    void alignSectionStart(boost::filesystem::ofstream& file);

    /// @brief Aligns section end according to section alignment
    /// @param [in]                     output file stream
    void alignSectionEnd(boost::filesystem::ofstream& file);

    unsigned long m_sectionAlignment;
    std::string m_name;
    std::shared_ptr<std::vector<uint8_t>> m_data;
    std::shared_ptr<IMAGE_SECTION_HEADER> m_sectionHeader;
    unsigned long& m_size;
};

#endif