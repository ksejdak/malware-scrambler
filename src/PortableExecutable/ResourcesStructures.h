#ifndef RESOURCESSTRUCTURES_H
#define RESOURCESSTRUCTURES_H

#include "PESection.h"

#include <Windows.h>
#include <winnt.h>
#include <vector>
#include <memory>
#include <string>
#include <boost\filesystem\fstream.hpp>

struct NewResource
{
    std::shared_ptr<std::vector<uint8_t>> data;
    unsigned int type;
    unsigned int firstDirectoryId;
    unsigned int secondDirectoryId;
};

class ResourceDirectory;

size_t getOverallResourceSize(std::shared_ptr<std::vector<uint8_t>> resourceData);

class IResourceComponent
{
public:
    /// @brief Constructor
    /// @param [in] section         pointer to section
    /// @param [in] entry           resource directory entry
    IResourceComponent(PESection* section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry = NULL);

    /// @brief Virtual destructor
    virtual ~IResourceComponent() {}

    /// @brief Checks if this component is resource or directory
    /// @return True if directory, false otherwise
	virtual bool isDirectory() = 0;

    /// @brief Checks if this component is named
    /// @return True if named, false otherwise
    bool isNamed();

    /// @brief Sets parent component
    /// @param [in] parentComponent     parent component
    void setParent(std::shared_ptr<ResourceDirectory> parentComponent);

    /// @brief Returns component's name (taken as Id or name)
    /// @return component's name
    std::string getComponentName();

    /// @brief Returns component's Id
    /// @return component's Id
    unsigned long getId();

    /// @brief Saves resource component to file
    /// @note  Function takes care about file alignment
    /// @param [in] file                output file stream
    /// @param [in] saveOffset          offset where this entry's childs should be stored
    /// @return file offset where next entry's childs should be stored
    virtual size_t save(boost::filesystem::ofstream& file, size_t saveOffset) = 0;

    /// @brief Prints component according to indentation. Only for debugging
    /// @param [in] indentation     number of tabulators used to print this component
    virtual void debugPrint(int indentation) = 0;

protected:
    unsigned long m_sectionOffset;
    unsigned long m_sectionRVA;

    std::string m_componentName;
    unsigned long m_id;

    IMAGE_RESOURCE_DIRECTORY_ENTRY m_entry;
    IMAGE_RESOURCE_DIRECTORY_STRING m_string;
    std::shared_ptr<ResourceDirectory> m_parentComponent;
};

#endif