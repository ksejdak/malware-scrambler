#include "ResourcesSection.h"
#include "ResourceEntry.h"
#include "Utils\Debug\Debug.h"

#include <memory>
#include <sstream>
#include <iomanip>

ResourcesSection::ResourcesSection(std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader, boost::shared_array<uint8_t> image, SectionType sectionType)
    : PESection(sectionHeader, image, sectionType)
{
    m_root.reset(new ResourceDirectory(this));
    addDirectoryEntries(m_root);

    LOG_EMPTY();
    LOG_DEBUG("Resource structure:");
    m_root->debugPrint();
    LOG_EMPTY();

    // we don't need it any more, all structures are initialized
    m_data.reset();
}

size_t ResourcesSection::addNewResource(std::shared_ptr<NewResource> newResource)
{
    // first directory entry
    std::unique_ptr<IMAGE_RESOURCE_DIRECTORY_ENTRY> newFirstDirectoryEntry(new IMAGE_RESOURCE_DIRECTORY_ENTRY());
    newFirstDirectoryEntry->DataIsDirectory = 1;
    newFirstDirectoryEntry->Id = newResource->firstDirectoryId;

    // first directory component
    std::shared_ptr<ResourceDirectory> newFirstDirectoryComponent(new ResourceDirectory(this, newFirstDirectoryEntry.get()));

    // second directory entry
    std::unique_ptr<IMAGE_RESOURCE_DIRECTORY_ENTRY> newSecondDirectoryEntry(new IMAGE_RESOURCE_DIRECTORY_ENTRY());
    newSecondDirectoryEntry->DataIsDirectory = 1;
    newSecondDirectoryEntry->Id = newResource->secondDirectoryId;

    // second directory component
    std::shared_ptr<ResourceDirectory> newSecondDirectoryComponent(new ResourceDirectory(this, newSecondDirectoryEntry.get()));

    // resource entry
    std::unique_ptr<IMAGE_RESOURCE_DIRECTORY_ENTRY> newEntry(new IMAGE_RESOURCE_DIRECTORY_ENTRY());
    newEntry->Id = newResource->type;

    // data entry
    std::unique_ptr<IMAGE_RESOURCE_DATA_ENTRY> newDataEntry(new IMAGE_RESOURCE_DATA_ENTRY());
    newDataEntry->Size = newResource->data->size();

    // add entry component
    std::shared_ptr<ResourceEntry> newEntryComponent(new ResourceEntry(this, newEntry.get(), newDataEntry.get(), newResource->data));

    newEntryComponent->setParent(newSecondDirectoryComponent);
    newSecondDirectoryComponent->add(newEntryComponent);
    newSecondDirectoryComponent->setParent(newFirstDirectoryComponent);
    newFirstDirectoryComponent->add(newSecondDirectoryComponent);
    newFirstDirectoryComponent->setParent(m_root);
    m_root->add(newFirstDirectoryComponent);

    return getOverallResourceSize(newResource->data);
}

std::shared_ptr<ResourceDirectory> ResourcesSection::getRoot()
{
    return m_root;
}

void ResourcesSection::save(boost::filesystem::ofstream& file)
{
    if(getRawSize() == 0)
    {
        LOG_EMPTY();
        std::stringstream debugEmptySection;
        debugEmptySection << "Empty section [raw size: " << getRawSize() << "] - skipping";
        LOG_DEBUG(debugEmptySection.str());
        LOG_EMPTY();
        return;
    }

    file.seekp(static_cast<size_t>(m_sectionHeader->PointerToRawData));
    m_root->save(file, 0);
}

void ResourcesSection::addDirectoryEntries(std::shared_ptr<ResourceDirectory> parentComponent, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry)
{
    PIMAGE_RESOURCE_DIRECTORY directory;

    if(entry)
        directory = reinterpret_cast<PIMAGE_RESOURCE_DIRECTORY>(m_data->data() + entry->OffsetToDirectory);
    else
        directory = reinterpret_cast<PIMAGE_RESOURCE_DIRECTORY>(m_data->data());

    unsigned int entriesCount = directory->NumberOfIdEntries + directory->NumberOfNamedEntries;
    uint8_t* firstEntryPtr = (uint8_t*) directory + sizeof(IMAGE_RESOURCE_DIRECTORY);

    for(unsigned int i = 0; i < entriesCount; ++i)
    {
        uint8_t* resourcePtr = firstEntryPtr + i * sizeof(IMAGE_RESOURCE_DIRECTORY_ENTRY);
        PIMAGE_RESOURCE_DIRECTORY_ENTRY childEntry = reinterpret_cast<PIMAGE_RESOURCE_DIRECTORY_ENTRY>(resourcePtr);
        if(childEntry->DataIsDirectory)
        {
            std::shared_ptr<ResourceDirectory> childDirectoryComponent(new ResourceDirectory(this, childEntry));
            childDirectoryComponent->setParent(parentComponent);
            parentComponent->add(childDirectoryComponent);
            addDirectoryEntries(childDirectoryComponent, childEntry);
        }
        else
        {
            std::shared_ptr<ResourceEntry> childEntryComponent(new ResourceEntry(this, childEntry));
            childEntryComponent->setParent(parentComponent);
            parentComponent->add(childEntryComponent);
        }
    }
}