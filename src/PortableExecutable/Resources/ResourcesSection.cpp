#include "ResourcesSection.h"
#include "ResourceEntry.h"
#include "Utils\Debug\Debug.h"
#include "PortableExecutable\PortableExecutableCommon\PEFile.h"

ResourcesSection::ResourcesSection(PIMAGE_DATA_DIRECTORY dataDirectoryEntry, PEFile* PE)
    : DataDirectoryEntry(dataDirectoryEntry, PE)
{
    m_holdingSection = PE->RVAToSection(m_entryRVA);
    m_root.reset(new ResourceDirectory(m_holdingSection));
    addDirectoryEntries(m_root);

    LOG_EMPTY();
    LOG_DEBUG("Resource structure:");
    m_root->debugPrint();
    LOG_EMPTY();
}

void ResourcesSection::addToRVAs(size_t value)
{
    ResourceIterator it(getRoot());
    std::shared_ptr<ResourceEntry> resource;
    while(resource = it.getNext())
        resource->addToRVA(value);
}

std::shared_ptr<ResourceDirectory> ResourcesSection::getRoot()
{
    return m_root;
}

void ResourcesSection::addDirectoryEntries(std::shared_ptr<ResourceDirectory> parentComponent, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry)
{
    PIMAGE_RESOURCE_DIRECTORY directory;

    if(entry)
        directory = reinterpret_cast<PIMAGE_RESOURCE_DIRECTORY>(m_data->data() + entry->OffsetToDirectory);
    else
        directory = reinterpret_cast<PIMAGE_RESOURCE_DIRECTORY>(m_data->data());

    unsigned int entriesCount = directory->NumberOfIdEntries + directory->NumberOfNamedEntries;
    uint8_t* firstEntryPtr = reinterpret_cast<uint8_t*>(directory) + sizeof(IMAGE_RESOURCE_DIRECTORY);

    for(unsigned int i = 0; i < entriesCount; ++i)
    {
        uint8_t* resourcePtr = firstEntryPtr + i * sizeof(IMAGE_RESOURCE_DIRECTORY_ENTRY);
        PIMAGE_RESOURCE_DIRECTORY_ENTRY childEntry = reinterpret_cast<PIMAGE_RESOURCE_DIRECTORY_ENTRY>(resourcePtr);
        if(childEntry->DataIsDirectory)
        {
            std::shared_ptr<ResourceDirectory> childDirectoryComponent(new ResourceDirectory(m_holdingSection, childEntry));
            childDirectoryComponent->setParent(parentComponent);
            parentComponent->add(childDirectoryComponent);
            addDirectoryEntries(childDirectoryComponent, childEntry);
        }
        else
        {
            std::shared_ptr<ResourceEntry> childEntryComponent(new ResourceEntry(m_holdingSection, childEntry));
            childEntryComponent->setParent(parentComponent);
            parentComponent->add(childEntryComponent);
        }
    }
}