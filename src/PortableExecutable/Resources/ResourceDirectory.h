#ifndef RESOURCEDIRECTORY_H
#define RESOURCEDIRECTORY_H

#include "ResourcesStructures.h"

#include <list>
#include <memory>

class ResourceIterator;

class ResourceDirectory : public IResourceComponent
{
public:
    /// @brief Constructor
    /// @param [in] section         pointer to section
    /// @param [in] entry           resource directory entry
    ResourceDirectory(std::shared_ptr<PESection> section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry = nullptr);

    /// @brief Virtual destructor
    virtual ~ResourceDirectory() {}

    /// @see IResourceComponent::isDirectory
	virtual bool isDirectory();

    /// @brief Returns numer of all named resources in resource tree starting from this component
    /// @note  This function should return 1 only from entry component
    /// @return number of named resources
    unsigned int getNamedResourcesCount();

    /// @brief Returns numer of all Id resources in resource tree starting from this component
    /// @note  This function should return 1 only from entry component
    /// @return number of Id resources
    unsigned int getIdResourcesCount();

    /// @brief Adds child component to this component
    /// @param [in] entry           pointer to child entry component
    void add(std::shared_ptr<IResourceComponent> entry);

    /// @see IResourceComponent::save
    //virtual size_t save(std::ofstream& file, size_t saveOffset);

    /// @see IResourceComponent::debugPrint
    virtual void debugPrint(int indentation = 0);

private:
    bool m_isRoot;
	std::vector<std::shared_ptr<IResourceComponent>> m_entries;

    friend class ResourceIterator;
	
};

class ResourceEntry;

class ResourceIterator
{
public:
    /// @brief Constructor
    ResourceIterator(std::shared_ptr<ResourceDirectory> begin);

    /// @brief Iterates to the next resource entry component
    /// @return pointer to resource entry component
    std::shared_ptr<ResourceEntry> getNext();

    /// @brief Removes current resource along side with all associated not shared directories
    /// @note  After remove operation this iterator is invalidated
    /// @return true on success, false otherwise
    //bool remove();

private:
    std::shared_ptr<ResourceDirectory> m_begin;
    std::shared_ptr<ResourceDirectory> m_currentParent;
    std::shared_ptr<ResourceEntry> m_currentResource;
    std::list<int> m_currentChildNumStack;
};

#endif