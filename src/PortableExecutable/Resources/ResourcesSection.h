#ifndef RESOURCESSECTION_H
#define RESOURCESSECTION_H

#include "PortableExecutable\PortableExecutableCommon\DataDirectory.h"
#include "PortableExecutable\PortableExecutableCommon\PESection.h"
#include "ResourceDirectory.h"

#include <memory>

class ResourcesSection : public DataDirectoryEntry
{
public:
    /// @brief Constructor
    /// @param [in] dataDirectoryEntry      entry from data directory
    /// @param [in] PE                      pointer to PE file that holds this data directory
    ResourcesSection(PIMAGE_DATA_DIRECTORY dataDirectoryEntry, PEFile* PE);

    /// @brief Virtual destructor
    virtual ~ResourcesSection() {}

    /// @see DataDirectoryEntry::addToRVAs
    virtual void addToRVAs(unsigned long value);

    /// @brief Returns resources section root directory
    /// @return pointer to root directory
    std::shared_ptr<ResourceDirectory> getRoot();

private:
    /// @brief Adds child entries for given directory component and its directory entry
    /// @param [in] parentComponent     pointer to parent component where childs will be added
    /// @param [in] entry               resource directory entry describing given entry
    /// @note  When called for the first time, we don't know what is the entry for root. We assume that first data in .rsrc section
    ///        is PIMAGE_RESOURCE_DIRECTORY.
    void addDirectoryEntries(std::shared_ptr<ResourceDirectory> parentComponent, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry = nullptr);

private:
    std::shared_ptr<PESection> m_holdingSection;
    std::shared_ptr<ResourceDirectory> m_root;
};

#endif