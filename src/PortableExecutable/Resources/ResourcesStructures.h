#ifndef RESOURCESSTRUCTURES_H
#define RESOURCESSTRUCTURES_H

#include "PortableExecutable\PortableExecutableCommon\PESection.h"

#include <Windows.h>
#include <winnt.h>
#include <vector>
#include <memory>
#include <string>
#include <fstream>

class ResourceDirectory;

class IResourceComponent
{
public:
    /// @brief Constructor
    /// @param [in] section         pointer to section
    /// @param [in] entry           resource directory entry
    IResourceComponent(PESection* section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry = nullptr);

    /// @brief Virtual destructor
    virtual ~IResourceComponent() {}

    /// @brief Checks if this component is resource or directory
    /// @return True if directory, false otherwise
	virtual bool isDirectory() = 0;

    /// @brief Checks if this component is named
    /// @return True if named, false otherwise
    bool isNamed();

    /// @brief Sets parent component
    /// @param [in] parentComponent     parent component
    void setParent(std::shared_ptr<ResourceDirectory> parentComponent);

    /// @brief Returns component's name (taken as Id or name)
    /// @return component's name
    std::string getComponentName();

    /// @brief Returns component's Id
    /// @return component's Id
    unsigned long getId();

    /// @brief Prints component according to indentation. Only for debugging
    /// @param [in] indentation     number of tabulators used to print this component
    virtual void debugPrint(int indentation) = 0;

protected:
    unsigned long& m_sectionRVA;

    std::string m_componentName;
    unsigned long m_id;

    PIMAGE_RESOURCE_DIRECTORY_ENTRY m_entry;
    PIMAGE_RESOURCE_DIRECTORY_STRING m_string;
    std::shared_ptr<ResourceDirectory> m_parentComponent;
};

#endif