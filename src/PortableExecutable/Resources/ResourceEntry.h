#ifndef RESOURCEENTRY_H
#define RESOURCEENTRY_H

#include "ResourcesStructures.h"

#include <memory>

class ResourceEntry : public IResourceComponent
{
public:
    /// @brief Constructor
    /// @param [in] section         pointer to section
    /// @param [in] entry           resource directory entry
    ResourceEntry(std::shared_ptr<PESection> section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry);

    /// @brief Constructor while adding new resource
    /// @param [in] section         pointer to section
    /// @param [in] entry           resource directory entry
    /// @param [in] dataEntry       resource data entry
    /// @param [in] resourceData    resource data
    //ResourceEntry(PESection* section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry, PIMAGE_RESOURCE_DATA_ENTRY dataEntry, std::shared_ptr<std::vector<uint8_t>> resourceData);

    /// @brief Virtual destructor
    virtual ~ResourceEntry() {}

    /// @see IResourceComponent::isDirectory
	virtual bool isDirectory();

    /// @brief Adds value to RVA pointing to resource data
    /// @param [in] value           value to be added to RVA
    void addToRVA(size_t value);

    /// @brief Returns raw resource data (ex. image, string)
    /// @return raw resource data
    std::shared_ptr<std::vector<uint8_t>> getResource();

    /// @see IResourceComponent::save
    //virtual size_t save(std::ofstream& file, size_t saveOffset);

    /// @see IResourceComponent::debugPrint
    virtual void debugPrint(int indentation);

private:
    PIMAGE_RESOURCE_DATA_ENTRY m_dataEntry;
    std::shared_ptr<std::vector<uint8_t>> m_resourceData;

    friend class ResourceIterator;
};

#endif