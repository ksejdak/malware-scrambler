#include "DataDirectory.h"
#include "PEFile.h"
#include "PESection.h"

DataDirectoryEntry::DataDirectoryEntry(PIMAGE_DATA_DIRECTORY dataDirectoryEntry, PEFile* PE)
    : m_entryRVA(dataDirectoryEntry->VirtualAddress)
    , m_entrySize(dataDirectoryEntry->Size)
{
    m_data = PE->RVAToSection(m_entryRVA)->getData();
}

DataDirectory::DataDirectory(PIMAGE_DATA_DIRECTORY dataDirectory, PEFile* PE)
    : m_dataDirectory(dataDirectory)
    , m_entries(IMAGE_NUMBEROF_DIRECTORY_ENTRIES, std::shared_ptr<DataDirectoryEntry>())
{
    m_entries[DataDirectoryType::EXPORT        ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT        ], PE));
    m_entries[DataDirectoryType::IMPORT        ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT        ], PE));
    m_entries[DataDirectoryType::RESOURCE      ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE      ], PE));
    m_entries[DataDirectoryType::EXCEPTION     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION     ], PE));
    m_entries[DataDirectoryType::SECURITY      ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY      ], PE));
    m_entries[DataDirectoryType::BASERELOC     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC     ], PE));
    m_entries[DataDirectoryType::DEBUG         ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG         ], PE));
    m_entries[DataDirectoryType::ARCHITECTURE  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_ARCHITECTURE  ], PE));
    m_entries[DataDirectoryType::GLOBALPTR     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_GLOBALPTR     ], PE));
    m_entries[DataDirectoryType::TLS           ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_TLS           ], PE));
    m_entries[DataDirectoryType::LOAD_CONFIG   ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG   ], PE));
    m_entries[DataDirectoryType::BOUND_IMPORT  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT  ], PE));
    m_entries[DataDirectoryType::IAT           ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_IAT           ], PE));
    m_entries[DataDirectoryType::DELAY_IMPORT  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT  ], PE));
    m_entries[DataDirectoryType::COM_DESCRIPTOR].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR], PE));
}

std::shared_ptr<DataDirectoryEntry> DataDirectory::getEntry(DataDirectoryType dataDirectoryType)
{
    return m_entries[dataDirectoryType];
}