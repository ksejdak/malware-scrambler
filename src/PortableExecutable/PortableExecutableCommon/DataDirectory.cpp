#include "DataDirectory.h"
#include "PEFile.h"
#include "PESection.h"
#include "PortableExecutable\IAT\ImportDirectory.h"
#include "PortableExecutable\Resources\ResourcesSection.h"
#include "PortableExecutable\LoadConfig\LoadConfigDirectory.h"
#include "Utils\Debug\Debug.h"

// it should be true, when working with UPX files
static const bool DISABLE_DATA_DIRECTORY = true;

DataDirectoryEntry::DataDirectoryEntry(PIMAGE_DATA_DIRECTORY dataDirectoryEntry, PEFile* PE)
    : m_entryRVA(dataDirectoryEntry->VirtualAddress)
    , m_entryVirtualSize(dataDirectoryEntry->Size)
    , m_PE(PE)
{
    try
    {
        if(m_entryRVA != 0)
            m_data = PE->RVAToSection(m_entryRVA)->getData();
    }
    catch(const std::exception&)
    {
        // pass through
    }
}

uint8_t* DataDirectoryEntry::getDataForRVA(unsigned long RVA)
{
    std::shared_ptr<PESection> section = m_PE->RVAToSection(RVA);
    unsigned long offsetInData = RVA - section->getSectionHeader()->VirtualAddress;
    uint8_t* dataPtr = reinterpret_cast<uint8_t*>(section->getData()->data() + offsetInData);

    return dataPtr;
}

unsigned long DataDirectoryEntry::getRVA()
{
    return m_entryRVA;
}

void DataDirectoryEntry::setRVA(unsigned long RVA)
{
    m_entryRVA = RVA;
}

unsigned long DataDirectoryEntry::getVirtualSize()
{
    return m_entryVirtualSize;
}

void DataDirectoryEntry::setVirtualSize(unsigned long virtualSize)
{
    m_entryVirtualSize = virtualSize;
}

std::shared_ptr<std::vector<uint8_t>> DataDirectoryEntry::getData()
{
    return m_data;
}

unsigned long DataDirectoryEntry::getDataOffset()
{
    std::shared_ptr<PESection> section = m_PE->RVAToSection(m_entryRVA);
    return m_entryRVA - section->getSectionHeader()->VirtualAddress;
}

DataDirectory::DataDirectory(PIMAGE_DATA_DIRECTORY dataDirectory, PEFile* PE)
    : m_dataDirectory(dataDirectory)
    , m_entries(IMAGE_NUMBEROF_DIRECTORY_ENTRIES, std::shared_ptr<DataDirectoryEntry>())
{
    LOG_EMPTY();
    LOG_INFO("Initializing data directory...");

    if(DISABLE_DATA_DIRECTORY)
    {
        m_entries[DataDirectoryType::EXPORT        ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT        ], PE));
        m_entries[DataDirectoryType::IMPORT        ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT        ], PE));
        m_entries[DataDirectoryType::RESOURCE      ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE      ], PE));
        m_entries[DataDirectoryType::EXCEPTION     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION     ], PE));
        m_entries[DataDirectoryType::SECURITY      ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY      ], PE));
        m_entries[DataDirectoryType::BASERELOC     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC     ], PE));
        m_entries[DataDirectoryType::DEBUG         ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG         ], PE));
        m_entries[DataDirectoryType::ARCHITECTURE  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_ARCHITECTURE  ], PE));
        m_entries[DataDirectoryType::GLOBALPTR     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_GLOBALPTR     ], PE));
        m_entries[DataDirectoryType::TLS           ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_TLS           ], PE));
        m_entries[DataDirectoryType::LOAD_CONFIG   ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG   ], PE));
        m_entries[DataDirectoryType::BOUND_IMPORT  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT  ], PE));
        m_entries[DataDirectoryType::IAT           ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_IAT           ], PE));
        m_entries[DataDirectoryType::DELAY_IMPORT  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT  ], PE));
        m_entries[DataDirectoryType::COM_DESCRIPTOR].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR], PE));
    }
    else
    {
        m_entries[DataDirectoryType::EXPORT        ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT        ], PE));
        m_entries[DataDirectoryType::IMPORT        ].reset(new ImportDirectory(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT           ], PE));
        m_entries[DataDirectoryType::RESOURCE      ].reset(new ResourcesSection(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE        ], PE));
        m_entries[DataDirectoryType::EXCEPTION     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION     ], PE));
        m_entries[DataDirectoryType::SECURITY      ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY      ], PE));
        m_entries[DataDirectoryType::BASERELOC     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC     ], PE));
        m_entries[DataDirectoryType::DEBUG         ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG         ], PE));
        m_entries[DataDirectoryType::ARCHITECTURE  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_ARCHITECTURE  ], PE));
        m_entries[DataDirectoryType::GLOBALPTR     ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_GLOBALPTR     ], PE));
        m_entries[DataDirectoryType::TLS           ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_TLS           ], PE));
        m_entries[DataDirectoryType::LOAD_CONFIG   ].reset(new LoadConfigDirectory(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG  ], PE));
        m_entries[DataDirectoryType::BOUND_IMPORT  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT  ], PE));
        m_entries[DataDirectoryType::IAT           ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_IAT           ], PE));
        m_entries[DataDirectoryType::DELAY_IMPORT  ].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT  ], PE));
        m_entries[DataDirectoryType::COM_DESCRIPTOR].reset(new DataDirectoryEntry(&m_dataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR], PE));
    }

    LOG_INFO("Data directory initialization success!");
}

std::shared_ptr<DataDirectoryEntry> DataDirectory::getEntry(DataDirectoryType dataDirectoryType)
{
    return m_entries[dataDirectoryType];
}