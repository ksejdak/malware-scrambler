#include "SectionFactory.h"
#include "PortableExecutable\Resources\ResourcesSection.h"

#include <boost\assign.hpp>
#include <map>

static const bool DISABLE_RESOURCE_SECTION = true;

SectionType sectionNameToType(std::string sectionName)
{
    std::map<std::string, SectionType> sectionTypes = boost::assign::map_list_of(".text",    TEXT)
                                                                                ("CODE",     TEXT)
																				(".data",    DATA)
                                                                                ("DATA",     DATA)
																				(".rdata",   RDATA)
																				(".idata",   IDATA)
																				(".edata",   EDATA)
																				(".rsrc",    RSRC)
																				(".bss",     BSS)
                                                                                ("BSS",      BSS)
																				(".crt",     CRT)
																				(".tls",     TLS)
																				(".reloc",   RELOC)
																				(".sdata",   SDATA)
																				(".srdata",  SRDATA)
																				(".pdata",   PDATA)
																				(".debug$S", DEBUG_S)
																				(".debug$T", DEBUG_T)
																				(".debug$P", DEBUG_P)
																				(".drectve", DRECTVE)
																				(".didat",   DIDAT)
																				;

    if(sectionTypes.find(sectionName) == sectionTypes.end())
        return NONSTANDARD_SECTION;

    return sectionTypes[sectionName];
}

std::shared_ptr<PESection> SectionFactory::createSection(std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader, boost::shared_array<uint8_t> image)
{
	std::shared_ptr<PESection> section;
    std::string sectionName = (char*) sectionHeader->Name;
    SectionType sectionType = sectionNameToType(sectionName);
	
    switch(sectionType)
	{
	case TEXT:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case DATA:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case RDATA:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case IDATA:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case EDATA:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case RSRC:
        if(DISABLE_RESOURCE_SECTION)
            section.reset(new PESection(sectionHeader, image, sectionType));
        else
            section.reset(new ResourcesSection(sectionHeader, image, sectionType));
		break;
	case BSS:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case CRT:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case TLS:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case RELOC:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case SDATA:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case SRDATA:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case PDATA:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case DEBUG_S:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case DEBUG_T:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case DEBUG_P:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case DRECTVE:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
	case DIDAT:
        section.reset(new PESection(sectionHeader, image, sectionType));
		break;
    case NONSTANDARD_SECTION:
        // pass through
	default:
        section.reset(new PESection(sectionHeader, image, NONSTANDARD_SECTION));
	}

    return section;
}