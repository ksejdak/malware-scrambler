#include "CodeSectionLayoutAnalyzer.h"

unsigned long CodeSectionLayoutAnalyzer::checkRealCodeSize(unsigned long entryPointRVA, std::shared_ptr<PEFile> PE)
{
    std::shared_ptr<PESection> codeSection = PE->RVAToSection(entryPointRVA);
    unsigned long minimalRVA = codeSection->getSectionHeader()->VirtualAddress + codeSection->getDataSize();
    for(int i = 0; i < IMAGE_NUMBEROF_DIRECTORY_ENTRIES - 1; ++i)
    {
        DataDirectoryType dataDirectoryType = static_cast<DataDirectoryType>(i);
        std::shared_ptr<DataDirectory> dataDirectory = PE->getDataDirectory();
        std::shared_ptr<DataDirectoryEntry> dataDirectoryEntry = dataDirectory->getEntry(dataDirectoryType);

        try
        {
            unsigned long dataDirectoryEntryRVA = dataDirectoryEntry->getRVA();
            std::string holdingSectionName = PE->RVAToSection(dataDirectoryEntryRVA)->getName();
            if(holdingSectionName == codeSection->getName() && dataDirectoryEntryRVA > entryPointRVA)
                minimalRVA = std::min<unsigned long>(minimalRVA, dataDirectoryEntryRVA);
        }
        catch(const std::exception&)
        {
            // in case of bound IAT, pass through
        }
    }

    unsigned long entryPointOffset = entryPointRVA - codeSection->getSectionHeader()->VirtualAddress;
    size_t codeBeginningOffset = checkCodeBeginningOffset(entryPointRVA, PE);
    size_t codeBeginningRVA = entryPointRVA - (entryPointOffset - codeBeginningOffset);
    unsigned long realCodeSize = minimalRVA - codeBeginningRVA;
    return realCodeSize;
}

unsigned long CodeSectionLayoutAnalyzer::checkCodeBeginningOffset(unsigned long entryPointRVA, std::shared_ptr<PEFile> PE)
{
    std::shared_ptr<PESection> codeSection = PE->RVAToSection(entryPointRVA);
    unsigned long maximalRVA = codeSection->getSectionHeader()->VirtualAddress;
    for(int i = 0; i < IMAGE_NUMBEROF_DIRECTORY_ENTRIES - 1; ++i)
    {
        DataDirectoryType dataDirectoryType = static_cast<DataDirectoryType>(i);
        std::shared_ptr<DataDirectory> dataDirectory = PE->getDataDirectory();
        std::shared_ptr<DataDirectoryEntry> dataDirectoryEntry = dataDirectory->getEntry(dataDirectoryType);

        try
        {
            unsigned long dataDirectoryEntryRVA = dataDirectoryEntry->getRVA();
            std::string holdingSectionName = PE->RVAToSection(dataDirectoryEntryRVA)->getName();
            if(holdingSectionName == codeSection->getName() && dataDirectoryEntryRVA < entryPointRVA)
                maximalRVA = std::max<unsigned long>(maximalRVA, dataDirectoryEntryRVA + dataDirectoryEntry->getVirtualSize());
        }
        catch(const std::exception&)
        {
            // in case of bound IAT, pass through
        }
    }

    unsigned long codeBeginningOffset = maximalRVA - codeSection->getSectionHeader()->VirtualAddress;
    return codeBeginningOffset;
}