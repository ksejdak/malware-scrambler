#ifndef PESECTION_H
#define PESECTION_H

#include <Windows.h>
#include <winnt.h>
#include <string>
#include <memory>
#include <vector>
#include <fstream>
#include <boost\shared_array.hpp>
#include <boost\cstdint.hpp>

enum SectionType
{
    NONSTANDARD_SECTION,
    TEXT,
    DATA,
    RDATA,
    IDATA,
    EDATA,
    RSRC,
    BSS,
    CRT,
    TLS,
    RELOC,
    SDATA,
    SRDATA,
    PDATA,
    DEBUG_S,
    DEBUG_T,
    DEBUG_P,
    DRECTVE,
    DIDAT
};

class PESection
{
public:
    /// @brief Constructor with ready section header
    /// @param [in] sectionHeader       section header
    /// @param [in] image               image data 
    /// @param [in] sectionType         type of section
    PESection(std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader, boost::shared_array<uint8_t> image, SectionType sectionType);

    /// @brief Virtual destructor
    virtual ~PESection() {}

    /// @brief Gets section name
    /// @return section name
    std::string getName();

    /// @brief Gets size of internal data held in section vector
    /// @note  This size represents actuall size of data. After section resizing it should be equal to size in section header
    /// @return section size
    size_t getDataSize();

    /// @brief Gets section raw size taken from section header
    /// @return section size
    size_t getRawSize();

    /// @brief Gets section virtual size from section header
    /// @return section size
    size_t getVirtualSize();

    /// @brief Gets section type
    /// @return section type
    SectionType getSectionType();

    /// @brief Tells if data has removed alignment padding
    /// @return true if shrinked, false otherwise
    bool isShrinked();

    /// @brief Gets section data
    /// @return section data
    std::shared_ptr<std::vector<uint8_t>> getData();

    /// @brief Gets section header from section
    /// @return section header
    std::shared_ptr<IMAGE_SECTION_HEADER> getSectionHeader();

    /// @brief Sets section name
    /// @param [in] name                section name
    void setName(std::string name);

    /// @brief Sets section raw size
    /// @param [in] section size        section raw size
    void setRawSize(unsigned long rawSize);

    /// @brief Sets section virtual size
    /// @param [in] virtualSize         section virtual size
    void setVirtualSize(unsigned long virtualSize);

    /// @brief Sets section type
    /// @param [in] sectionType         section type
    void setSectionType(SectionType sectionType);

    /// @brief Sets section data and its size
    /// @param [in] data                section data
    void setData(std::shared_ptr<std::vector<uint8_t>> data);

    /// @brief Sets section header
    /// @param [in] sectionHeader       section header
    void setSectionHeader(std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader);

    /// @brief Saves section to file
    /// @note  Function takes care about file alignment
    /// @param [in] file                output file stream
    virtual void save(std::ofstream& file);

protected:
    /// @brief Generates section header from section
    void generateSectionHeader();

protected:
    std::shared_ptr<std::vector<uint8_t>> m_data;
    std::shared_ptr<IMAGE_SECTION_HEADER> m_sectionHeader;
    SectionType m_sectionType;
    bool m_isShrinked;
};

#endif