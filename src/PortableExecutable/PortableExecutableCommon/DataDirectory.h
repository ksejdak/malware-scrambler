#ifndef DATADIRECTORY_H
#define DATADIRECTORY_H

#include <Windows.h>
#include <memory>
#include <vector>

enum DataDirectoryType
{
    EXPORT,
    IMPORT,
    RESOURCE,
    EXCEPTION,
    SECURITY,
    BASERELOC,
    DEBUG,
    ARCHITECTURE,
    GLOBALPTR,
    TLS,
    LOAD_CONFIG,
    BOUND_IMPORT,
    IAT,
    DELAY_IMPORT,
    COM_DESCRIPTOR
};

class PEFile;

class DataDirectoryEntry
{
public:
    /// @brief Constructor
    /// @param [in] dataDirectoryEntry      entry from data directory
    /// @param [in] PE                      pointer to PE file that holds this data directory
    DataDirectoryEntry(PIMAGE_DATA_DIRECTORY dataDirectoryEntry, PEFile* PE);

    /// @brief Returns data directory entry RVA
    /// @return RVA of this data directory entry
    unsigned long getRVA();

    /// @brief Sets data directory entry RVA
    /// @param [in] RVA                     new RVA of this data directory entry
    void setRVA(unsigned long RVA);

    /// @brief Returns data directory entry virtual size
    /// @return virtual size of this data directory entry
    unsigned long getVirtualSize();

    /// @brief Returns data directory entry data
    /// @return data of this data directory entry
    std::shared_ptr<std::vector<uint8_t>> getData();

    /// @brief Adds value to all known RVAs
    /// @param [in] value                   value to be added to RVAs
    virtual void addToRVAs(size_t value) {}

protected:
    /// @brief Returns section data related to given RVA
    /// @param [in]  RVA                    RVA of data
    /// @return data pointed by RVA
    uint8_t* getDataForRVA(unsigned long RVA);

protected:
    unsigned long& m_entryRVA;
    unsigned long& m_entryVirtualSize;
    std::shared_ptr<std::vector<uint8_t>> m_data;
    PEFile* m_PE;
};

class PEFile;

class DataDirectory
{
public:
    DataDirectory(PIMAGE_DATA_DIRECTORY dataDirectory, PEFile* PE);

    std::shared_ptr<DataDirectoryEntry> getEntry(DataDirectoryType dataDirectoryType);

private:
    PIMAGE_DATA_DIRECTORY m_dataDirectory;
    std::vector<std::shared_ptr<DataDirectoryEntry>> m_entries;
};

#endif