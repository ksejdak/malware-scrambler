#ifndef DATADIRECTORY_H
#define DATADIRECTORY_H

#include <Windows.h>
#include <memory>
#include <vector>

enum DataDirectoryType
{
    EXPORT,
    IMPORT,
    RESOURCE,
    EXCEPTION,
    SECURITY,
    BASERELOC,
    DEBUG,
    ARCHITECTURE,
    GLOBALPTR,
    TLS,
    LOAD_CONFIG,
    BOUND_IMPORT,
    IAT,
    DELAY_IMPORT,
    COM_DESCRIPTOR
};

class PEFile;

class DataDirectoryEntry
{
public:
    DataDirectoryEntry(PIMAGE_DATA_DIRECTORY dataDirectoryEntry, PEFile* PE);

protected:
    unsigned long& m_entryRVA;
    unsigned long& m_entrySize;
    std::shared_ptr<std::vector<uint8_t>> m_data;
};

class PEFile;

class DataDirectory
{
public:
    DataDirectory(PIMAGE_DATA_DIRECTORY dataDirectory, PEFile* PE);

    std::shared_ptr<DataDirectoryEntry> getEntry(DataDirectoryType dataDirectoryType);

private:
    PIMAGE_DATA_DIRECTORY m_dataDirectory;
    std::vector<std::shared_ptr<DataDirectoryEntry>> m_entries;
};

#endif