#ifndef PEFILE_H
#define PEFILE_H

#include "PESection.h"

#include <Windows.h>
#include <winnt.h>
#include <vector>
#include <map>
#include <memory>
#include <cstdint>
#include <boost\shared_array.hpp>
#include <boost\filesystem.hpp>

class PEFile
{
public:
    /// @brief Constructor
    /// @param [in] filePath                    path to PE file
    PEFile(const boost::filesystem::path& filePath);

    /// @brief Gets IMAGE_DOS_HEADER
    /// @return IMAGE_DOS_HEADER
    std::shared_ptr<IMAGE_DOS_HEADER> getDOSHeader();

    /// @brief Gets IMAGE_NT_HEADERS
    /// @return IMAGE_NT_HEADERS
    std::shared_ptr<IMAGE_NT_HEADERS> getNTHeaders();

    /// @brief Gets sections order
    /// @return sections order
    std::vector<std::string>& getSectionsOrder();

    /// @brief Gets PESections extracted from this file
    /// @return map of PESections
    std::map<std::string, std::shared_ptr<PESection>>& getSections();

    /// @brief Checks if file is compiled for x86 architecture
    /// @return true if file is x86, otherwise false
    bool isX86();

    /// @brief Sets file size
    /// @param [in] fileSize                    file size
    void setFileSize(size_t sectionsOverallRawSize);

    /// @brief Saves stored data into one PE file
    /// @note  Function does not check if data is valid. It assumes that all sections and headers are in
    ///        standard order.
    void save(const boost::filesystem::path& filePath = "");

    /// @brief Converts relative virtual address to file offset
    /// @param [in] RVA                         relative virtual address
    /// @return file offset
    unsigned long RVAToOffset(unsigned long RVA);

    /// @brief Returns PESection for given relative virtual address
    /// @param [in] RVA                         relative virtual address
    /// @return pointer to PESection
    std::shared_ptr<PESection> RVAToSection(unsigned long RVA);

    /// @brief Converts file offset to relative virtual address
    /// @param [in] offset                      file offset
    /// @return RVA
    unsigned long offsetToRVA(unsigned long offset);

    /// @brief Returns PESection for given file offset
    /// @param [in] offset                      file offset
    /// @return pointer to PESection
    std::shared_ptr<PESection> offsetToSection(unsigned long offset);

private:
    /// @brief Initializes all fields
    void init();

    /// @brief Checks within which section's scope does provided RVA exists
    /// @param [in] RVA                         relative virtual address
    /// @return pointer to section header
    std::shared_ptr<IMAGE_SECTION_HEADER> RVAToSectionHeader(unsigned long RVA);

    /// @brief Checks within which section's scope does provided file offset exists
    /// @param [in] offset                      file offset
    /// @return pointer to section header
    std::shared_ptr<IMAGE_SECTION_HEADER> offsetToSectionHeader(unsigned long offset);

    /// @brief Throws exception when object is not initialized
    void throwIfNotInitialized();

private:
    boost::filesystem::path m_filePath;
    size_t m_fileSize;
    bool m_isInitialized;

    std::shared_ptr<uint8_t> m_DOSStub;
    std::shared_ptr<IMAGE_DOS_HEADER> m_DOSHeader;
    std::shared_ptr<IMAGE_NT_HEADERS> m_NTHeaders;
    std::shared_ptr<uint8_t> m_boundIAT;
    std::vector<std::string> m_sectionsOrder;
    std::map<std::string, std::shared_ptr<PESection>> m_sections;
};

#endif