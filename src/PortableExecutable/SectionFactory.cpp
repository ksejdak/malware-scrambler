#include "SectionFactory.h"
#include "ResourcesSection.h"

#include <boost\assign.hpp>
#include <map>

enum StandardSections
{
    NONSTANDARD_SECTION,
    TEXT,
    DATA,
	RDATA,
	IDATA,
	EDATA,
    RSRC,
    BSS,
    CRT,
	TLS,
	RELOC,
	SDATA,
	SRDATA,
	PDATA,
	DEBUG_S,
	DEBUG_T,
	DEBUG_P,
	DRECTVE,
	DIDAT
};

StandardSections sectionNameToType(std::string sectionName)
{
    std::map<std::string, StandardSections> sectionTypes = boost::assign::map_list_of(".text",    TEXT)
																					 (".data",    DATA)
																					 (".rdata",   RDATA)
																					 (".idata",   IDATA)
																					 (".edata",   EDATA)
																					 (".rsrc",    RSRC)
																					 (".bss",     BSS)
																					 (".crt",     CRT)
																					 (".tls",     TLS)
																					 (".reloc",   RELOC)
																					 (".sdata",   SDATA)
																					 (".srdata",  SRDATA)
																					 (".pdata",   PDATA)
																					 (".debug$S", DEBUG_S)
																					 (".debug$T", DEBUG_T)
																					 (".debug$P", DEBUG_P)
																					 (".drectve", DRECTVE)
																					 (".didat",   DIDAT)
																					 ;

    if(sectionTypes.find(sectionName) == sectionTypes.end())
        return NONSTANDARD_SECTION;

    return sectionTypes[sectionName];
}

std::shared_ptr<PESection> SectionFactory::createSection(unsigned long sectionAlignment, std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader, boost::shared_array<char> image)
{
	std::shared_ptr<PESection> section;
    std::string sectionName = (char*) sectionHeader->Name;
    StandardSections sectionType = sectionNameToType(sectionName);
	
    switch(sectionType)
	{
	case TEXT:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case DATA:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case RDATA:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case IDATA:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case EDATA:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case RSRC:
        section.reset(new ResourcesSection(sectionAlignment, sectionHeader, image));
		break;
	case BSS:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case CRT:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case TLS:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case RELOC:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case SDATA:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case SRDATA:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case PDATA:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case DEBUG_S:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case DEBUG_T:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case DEBUG_P:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case DRECTVE:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
	case DIDAT:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
		break;
    case NONSTANDARD_SECTION:
        // pass through
	default:
        section.reset(new PESection(sectionAlignment, sectionHeader, image));
	}

    return section;
}