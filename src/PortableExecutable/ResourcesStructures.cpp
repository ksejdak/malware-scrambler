#include "ResourcesStructures.h"
#include "ResourceDirectory.h"

size_t getOverallResourceSize(std::shared_ptr<std::vector<char>> resourceData)
{
    size_t overallSize = 0;
    overallSize += 2 * sizeof(IMAGE_RESOURCE_DIRECTORY);
    overallSize += 2 * sizeof(IMAGE_RESOURCE_DIRECTORY_ENTRY);
    overallSize += 2 * sizeof(IMAGE_RESOURCE_DATA_ENTRY);
    overallSize += resourceData->size();

    return overallSize;
}

IResourceComponent::IResourceComponent(PESection* section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry)
    : m_id(0)
{
    m_sectionOffset = section->getSectionHeader()->PointerToRawData;
    m_sectionRVA = section->getSectionHeader()->VirtualAddress;

    std::memset(&m_entry, 0, sizeof(IMAGE_RESOURCE_DIRECTORY_ENTRY));
    std::memset(&m_string, 0, sizeof(IMAGE_RESOURCE_DIRECTORY_STRING));

    if(entry)
        std::memcpy(&m_entry, entry, sizeof(IMAGE_RESOURCE_DIRECTORY_ENTRY));

    if(entry)
    {
        if(isNamed())
        {
            char* stringPtr = section->getData()->data() + m_entry.NameOffset;
            std::memcpy(&m_string, stringPtr, sizeof(IMAGE_RESOURCE_DIRECTORY_STRING));
            m_componentName = m_string.NameString;
        }
        else
        {
            m_id = m_entry.Id;
            m_componentName = std::to_string(m_id);
        }
    }
    else
        m_componentName = "ROOT";
}

bool IResourceComponent::isNamed()
{
    return (bool) m_entry.NameIsString;
}

void IResourceComponent::setParent(std::shared_ptr<ResourceDirectory> parentComponent)
{
    m_parentComponent = parentComponent;
}

std::string IResourceComponent::getComponentName()
{
    return m_componentName;
}

unsigned long IResourceComponent::getId()
{
    return m_id;
}