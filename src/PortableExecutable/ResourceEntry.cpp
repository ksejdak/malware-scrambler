#include "ResourceEntry.h"
#include "Utils\Debug\Debug.h"

#include "PEFile.h"

ResourceEntry::ResourceEntry(PESection* section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry)
    : IResourceComponent(section, entry)
{
    LOG_EMPTY();
    char* dataEntryPtr = section->getData()->data() + m_entry.OffsetToData;
    std::memcpy(&m_dataEntry, dataEntryPtr, sizeof(IMAGE_RESOURCE_DATA_ENTRY));

    m_resourceData.reset(new std::vector<char>(m_dataEntry.Size));
    char* dataPtr = section->getData()->data() + m_dataEntry.OffsetToData - m_sectionRVA;
    std::memcpy(m_resourceData->data(), dataPtr, m_resourceData->size());

    std::stringstream msg;
    msg << "Found resource: [id: " << m_id << "], [size: " << m_resourceData->size() << "], [preview: ";
    for(unsigned int i = 0; i < 40; ++i)
        msg << std::showbase << std::hex << m_resourceData->at(i);
    msg << "]";
    LOG_DEBUG(msg.str());
}

ResourceEntry::ResourceEntry(PESection* section, PIMAGE_RESOURCE_DIRECTORY_ENTRY entry, PIMAGE_RESOURCE_DATA_ENTRY dataEntry, std::shared_ptr<std::vector<char>> resourceData)
    : IResourceComponent(section, entry)
{
    LOG_EMPTY();
    std::memcpy(&m_dataEntry, dataEntry, sizeof(IMAGE_RESOURCE_DATA_ENTRY));
    m_resourceData = resourceData;

    std::stringstream msg;
    msg << "Adding resource: [id: " << m_id << "], [size: " << m_resourceData->size() << "], [preview: ";
    for(unsigned int i = 0; i < 40; ++i)
        msg << std::hex << m_resourceData->at(i);
    msg << "]";
    LOG_DEBUG(msg.str());
}

bool ResourceEntry::isDirectory()
{
    return false;
}

std::shared_ptr<std::vector<char>> ResourceEntry::getResource()
{
    return m_resourceData;
}

size_t ResourceEntry::save(boost::filesystem::ofstream& file, size_t saveOffset)
{
    size_t entryBegOffset = file.tellp();
    size_t entryEndOffset = entryBegOffset + sizeof(IMAGE_RESOURCE_DIRECTORY_ENTRY);
    size_t contentOffset = entryEndOffset + saveOffset;

    // directory entry
    m_entry.OffsetToData = contentOffset - m_sectionOffset;
    file.write((char*) &m_entry, sizeof(IMAGE_RESOURCE_DIRECTORY_ENTRY));

    // set position to content save offset
    file.seekp(contentOffset);

    // data entry
    m_dataEntry.OffsetToData = contentOffset + sizeof(IMAGE_RESOURCE_DATA_ENTRY)+m_sectionRVA - m_sectionOffset;

    file.write((char*) &m_dataEntry, sizeof(IMAGE_RESOURCE_DATA_ENTRY));

    // resource data
    file.write(m_resourceData->data(), m_resourceData->size());

    // save file position as save offset for next entry
    size_t currentOffset = file.tellp();
    size_t nextSaveOffset = currentOffset - entryEndOffset;

    // rewind
    file.seekp(entryEndOffset);

    return nextSaveOffset;
}

void ResourceEntry::debugPrint(int indentation)
{
    std::stringstream ss;
    ss << std::string(indentation, '\t') << getComponentName();

    LOG_DEBUG(ss.str());
}