#include "PESection.h"
#include "Utils\Debug\Debug.h"

#include <cstring>

PESection::PESection(unsigned long sectionAlignment, std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader, boost::shared_array<uint8_t> image)
    : m_sectionAlignment(sectionAlignment)
    , m_sectionHeader(sectionHeader)
    , m_size(sectionHeader->SizeOfRawData)
{
    m_name = (char *) m_sectionHeader->Name;

    m_data.reset(new std::vector<uint8_t>(m_size));
    std::memcpy(m_data->data(), image.get() + sectionHeader->PointerToRawData, (size_t) m_size);
}

std::string PESection::getName()
{
    return m_name;
}

size_t PESection::getSize()
{
    return (size_t) m_size;
}

std::shared_ptr<std::vector<uint8_t>> PESection::getData()
{
    return m_data;
}

std::shared_ptr<IMAGE_SECTION_HEADER> PESection::getSectionHeader()
{
    if(!m_sectionHeader)
        generateSectionHeader();

    return m_sectionHeader;
}

void PESection::setName(std::string name)
{
    m_name = name;
}

void PESection::setData(std::shared_ptr<std::vector<uint8_t>> data)
{
    m_data = data;
    m_size = m_data->size();
}

void PESection::setSectionHeader(std::shared_ptr<IMAGE_SECTION_HEADER> sectionHeader)
{
    m_sectionHeader = sectionHeader;
}

void PESection::save(boost::filesystem::ofstream& file)
{
    if(m_size == 0)
    {
        LOG_EMPTY();
        std::stringstream debugEmptySection;
        debugEmptySection << "Empty section [size: " << m_size << "] - skipping";
        LOG_DEBUG(debugEmptySection.str());
        LOG_EMPTY();
        return;
    }

    alignSectionStart(file);
    file.write(reinterpret_cast<char*>(m_data->data()), m_size);
    alignSectionEnd(file);
}

void PESection::generateSectionHeader()
{
    m_sectionHeader.reset(new IMAGE_SECTION_HEADER);
}

void PESection::alignSectionStart(boost::filesystem::ofstream& file)
{
    while((unsigned long) file.tellp() % m_sectionAlignment)
        file.write("\0", 1);
}

void PESection::alignSectionEnd(boost::filesystem::ofstream& file)
{
    size_t sectionEnd = m_sectionHeader->PointerToRawData + m_size;
    size_t alignedSectionEnd = sectionEnd + (sectionEnd % m_sectionAlignment);

    file.seekp(alignedSectionEnd);
}