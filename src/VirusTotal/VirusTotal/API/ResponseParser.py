from Utils.Logger   import Logger
from Utils.Settings import SCAN_RESPONSE_SAVE, SCAN_REPORT_SAVE, SCAN_RESPONSE_SAVE_FILE, SCAN_REPORT_SAVE_FILE

class ScanResponseParser(object):
    
    def __init__(self):
        self.SUCCESS        = 1 
        self.FAILED         = 0

        self.__log = Logger.getLogger()
        self.__responseCode = self.FAILED
        self.__writeCounter = 1
        
        self.clear()

        # create functions mapping
        self.__saveHandlers = {
			"txt":  self.__saveToTXT
		}

    def clear(self):
        self.__message      = ""
        self.__resource     = ""
        self.__scanId       = ""
        self.__link         = ""
        self.__sha256       = ""
        self.__sha1         = ""
        self.__md5          = ""

    def getResponseCode(self):
        return self.__responseCode

    def getMessage(self):
        return self.__responseCode

    def getResource(self):
        return self.__resource

    def getScanId(self):
        return self.__scanId

    def getLink(self):
        return self.__link

    def getSHA256(self):
        return self.__sha256

    def getSHA1(self):
        return self.__sha1

    def getMD5(self):
        return self.__md5

    def show(self):
        self.__log.info("Response [code     : %-120d]", self.__responseCode)
        self.__log.info("Response [message  : %-120s]", self.__message)
        self.__log.info("Response [resource : %-120s]", self.__resource)
        self.__log.info("Response [scan_id  : %-120s]", self.__scanId)
        self.__log.info("Response [link     : %-120s]", self.__link)
        self.__log.info("Response [SHA256   : %-120s]", self.__sha256)
        self.__log.info("Response [SHA1     : %-120s]", self.__sha1)
        self.__log.info("Response [MD5      : %-120s]", self.__md5)

    def parse(self, responseDict):
        self.clear()
        if(responseDict is None or len(responseDict) == 0):
            return

        self.__responseCode = responseDict["response_code"]
        self.__message      = responseDict["verbose_msg"]
        self.__resource     = responseDict["resource"]
        self.__scanId       = responseDict["scan_id"]
        self.__link         = responseDict["permalink"]
        self.__sha256       = responseDict["sha256"]
        self.__sha1         = responseDict["sha1"]
        self.__md5          = responseDict["md5"]

        self.show()

    def save(self):
        saveMethod = self.__saveHandlers[SCAN_RESPONSE_SAVE]
        saveMethod()

    def __saveToTXT(self):
        file = open(SCAN_RESPONSE_SAVE_FILE, "a")
        file.write("%d -------------------------------------------------------------------------------------------------------------------------------------------------------------\n" % self.__writeCounter)
        file.write("\n")
        
        file.close()
        self.__writeCounter += 1

#----------------------------------------------------------------------------------------------------------------------

class ScanReportParser(object):
    
    def __init__(self):
        self.SUCCESS        = 1 
        self.FAILED         = 0

        self.__log = Logger.getLogger()
        self.__responseCode = self.FAILED
        self.__writeCounter = 1
        
        self.clear();

        # create functions mapping
        self.__saveHandlers = {
			"txt":  self.__saveToTXT
		}

    def clear(self):
        self.__message      = ""
        self.__resource     = ""
        self.__scanId       = ""
        self.__md5          = ""
        self.__sha1         = ""
        self.__sha256       = ""
        self.__scanDate     = ""
        self.__positives    = 0
        self.__total        = 0
        self.__scans        = {}
        self.__link         = ""

    def getResponseCode(self):
        return self.__responseCode

    def getMessage(self):
        return self.__responseCode

    def getResource(self):
        return self.__resource

    def getScanId(self):
        return self.__scanId

    def getMD5(self):
        return self.__md5

    def getSHA1(self):
        return self.__sha1

    def getSHA256(self):
        return self.__sha256

    def getScanDate(self):
        return self.__scanDate

    def getPositives(self):
        return self.__positives

    def getTotal(self):
        return self.__total

    def getScans(self):
        return self.__scans

    def getLink(self):
        return self.__link

    def show(self):
        self.__log.info("Response [code      : %-120d]", self.__responseCode)
        self.__log.info("Response [message   : %-120s]", self.__message)
        self.__log.info("Response [resource  : %-120s]", self.__resource)
        self.__log.info("Response [scan_id   : %-120s]", self.__scanId)
        self.__log.info("Response [MD5       : %-120s]", self.__md5)
        self.__log.info("Response [SHA1      : %-120s]", self.__sha1)
        self.__log.info("Response [SHA256    : %-120s]", self.__sha256)
        self.__log.info("Response [scan date : %-120s]", self.__scanDate)
        self.__log.info("Response [positives : %-120s]", self.__positives)
        self.__log.info("Response [total     : %-120s]", self.__total)
        self.__log.info("Response [link      : %-120s]", self.__link)
        self.__log.info("")
        for antivirus in self.__scans:
            self.__log.info("AV: %-20s detected: %-10s version: %-15s result: %-30s update: %s",
                            antivirus, self.__scans[antivirus]["detected"],
                            self.__scans[antivirus]["version"],
                            self.__scans[antivirus]["result"],
                            self.__scans[antivirus]["update"])

    def parse(self, responseDict):
        self.clear()
        if(responseDict is None or len(responseDict) == 0):
            return

        self.__responseCode = responseDict["response_code"]
        if(self.__responseCode == self.FAILED):
            self.show()
            return

        self.__message      = responseDict["verbose_msg"]
        self.__resource     = responseDict["resource"]
        self.__scanId       = responseDict["scan_id"]
        self.__md5          = responseDict["md5"]
        self.__sha1         = responseDict["sha1"]
        self.__sha256       = responseDict["sha256"]
        self.__scanDate     = responseDict["scan_date"]
        self.__positives    = responseDict["positives"]
        self.__total        = responseDict["total"]
        self.__scans        = responseDict["scans"]
        self.__link         = responseDict["permalink"]

        self.show()

    def save(self):
        saveMethod = self.__saveHandlers[SCAN_REPORT_SAVE]
        saveMethod()

    def __saveToTXT(self):
        file = open(SCAN_REPORT_SAVE_FILE, "a")
        file.write("%d -------------------------------------------------------------------------------------------------------------------------------------------------------------\n" % self.__writeCounter)
        file.write("Response [code      : %-120d]\n" % self.__responseCode)
        file.write("Response [message   : %-120s]\n" % self.__message)
        file.write("Response [resource  : %-120s]\n" % self.__resource)
        file.write("Response [scan_id   : %-120s]\n" % self.__scanId)
        file.write("Response [MD5       : %-120s]\n" % self.__md5)
        file.write("Response [SHA1      : %-120s]\n" % self.__sha1)
        file.write("Response [SHA256    : %-120s]\n" % self.__sha256)
        file.write("Response [scan date : %-120s]\n" % self.__scanDate)
        file.write("Response [positives : %-120s]\n" % self.__positives)
        file.write("Response [total     : %-120s]\n" % self.__total)
        file.write("Response [link      : %-120s]\n" % self.__link)
        file.write("")
        for antivirus in self.__scans:
            file.write("AV: %-20s detected: %-10s version: %-15s result: %-30s update: %s\n" % (
                           antivirus, self.__scans[antivirus]["detected"],
                           self.__scans[antivirus]["version"],
                           self.__scans[antivirus]["result"],
                           self.__scans[antivirus]["update"])
                       )
        
        file.close()
        self.__writeCounter += 1