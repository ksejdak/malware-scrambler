#ifndef MALWARESCRAMBLER_H
#define MALWARESCRAMBLER_H

#ifdef MALWARESCRAMBLERDLL_EXPORTS
#  define MALWARESCRAMBLERDLL_API __declspec(dllexport) 
#else
#  define MALWARESCRAMBLERDLL_API __declspec(dllimport) 
#endif

#include <memory>
#include <string>

class MutationPipeline;

class MALWARESCRAMBLERDLL_API MalwareScrambler
{
public:
    /// @brief Constructor
    /// @param [in] inputPath               input path
    /// @param [in] outputPath              output path
    /// @param [in] configPath              config path
    MalwareScrambler(const std::string& inputPath, const std::string& outputPath, const std::string& configPath);

    /// @brief Starts Malware-Scrambler
    void run();

    /// @brief Returns MalwareScrambler library version
    /// return version
    static std::string getVersion();

    /// @brief Returns MalwareScrambler library author
    /// return author
    static std::string getAuthor();

    /// @brief Returns MalwareScrambler library build date
    /// return build date
    static std::string getBuildDate();

private:
    /// @brief Processes one input file
    /// @param [in] mutationPipeline        mutation pipeline created basing on config file
    /// @param [in] filePath                input file path
    void processOneFile(std::shared_ptr<MutationPipeline> mutationPipeline, const std::string& filePath);

    const char* m_inputPath;
    const char* m_outputPath;
    const char* m_configPath;

    bool m_multipleFileProcessing;
};

#endif