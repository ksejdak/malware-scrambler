#ifndef MALWARESCRAMBLER_H
#define MALWARESCRAMBLER_H

#include <string>
#include <memory>

class MutationPipeline;

class MalwareScrambler
{
public:
    /// @brief Constructor
    /// @param [in] inputPath       input path
    /// @param [in] outputPath      output path
    /// @param [in] configPath      config path
    MalwareScrambler(const std::string& inputPath, const std::string& outputPath, const std::string& configPath);

    /// @brief Starts Malware-Scrambler
    void run();

    /// @brief Returns MalwareScrambler library version
    /// return version
    static std::string getVersion();

    /// @brief Returns MalwareScrambler library author
    /// return author
    static std::string getAuthor();

    /// @brief Returns MalwareScrambler library build date
    /// return build date
    static std::string getBuildDate();

private:
    void processOneFile(const std::string& filePath);

    std::string m_inputPath;
    std::string m_outputPath;
    std::string m_configPath;

    bool m_multipleFileProcessing;
    std::shared_ptr<MutationPipeline> m_mutationPipeline;
};

#endif